[{"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\index.js":"1","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\App.js":"2","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Game.js":"3","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Homepage.js":"4","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\randomCodeGenerator.js":"5","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\packOfCards.js":"6","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\shuffleArray.js":"7","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Spinner.js":"8","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\pageComponents\\visaoPlayer.js":"9","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\customHooks\\useWhileCard.js":"10"},{"size":320,"mtime":1649868743936,"results":"11","hashOfConfig":"12"},{"size":356,"mtime":1649868743838,"results":"13","hashOfConfig":"12"},{"size":14376,"mtime":1656983187481,"results":"14","hashOfConfig":"12"},{"size":1294,"mtime":1655937841861,"results":"15","hashOfConfig":"12"},{"size":368,"mtime":1649868743938,"results":"16","hashOfConfig":"12"},{"size":1122,"mtime":1656982698901,"results":"17","hashOfConfig":"12"},{"size":264,"mtime":1649868743939,"results":"18","hashOfConfig":"12"},{"size":152,"mtime":1649868743934,"results":"19","hashOfConfig":"12"},{"size":57502,"mtime":1656983121025,"results":"20","hashOfConfig":"12"},{"size":757,"mtime":1652563906249,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"mh3ezb",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\index.js",[],["46","47"],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\App.js",[],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Game.js",["48","49","50","51","52","53","54","55","56","57","58","59"],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Homepage.js",[],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\randomCodeGenerator.js",[],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\packOfCards.js",["60"],"//pack of 108 cards (_ = reverse)\r\n// prettier-ignore\r\nexport default [\r\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\r\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\r\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\r\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\r\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W',\r\n    'WHILE_R','WHILE_G','WHILE_B','WHILE_Y',\r\n    'BREAK_R','BREAK_R','BREAK_R','BREAK_G','BREAK_G','BREAK_G','BREAK_B','BREAK_B','BREAK_B','BREAK_Y','BREAK_Y','BREAK_Y',\r\n    'PASS_R','PASS_R','PASS_G','PASS_G','PASS_B','PASS_B','PASS_Y','PASS_Y',\r\n    'JOKER_W','JOKER_W','JOKER_W','JOKER_W'\r\n    ,'JOKER_W','JOKER_W','JOKER_W','JOKER_W'\r\n]\r\n","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\utils\\shuffleArray.js",[],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\components\\Spinner.js",[],"C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\pageComponents\\visaoPlayer.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import React, { useEffect, useState } from 'react'\r\nimport useSound from 'use-sound'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\n\r\nimport Spinner from '../components/Spinner'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\n\r\n\r\nconst VisaoPlayer = ({\r\n    player,\r\n    turn,\r\n    currentColor,\r\n    player1Deck,\r\n    player2Deck,\r\n    drawCardPile,\r\n    isSoundMuted,\r\n    playShufflingSound,\r\n    playedCardsPile,\r\n    currentNumber,\r\n    playSkipCardSound,\r\n    playDraw2CardSound,\r\n    playWildCardSound,\r\n    playDraw4CardSound,\r\n    //onCardDrawnHandler,\r\n    socket,\r\n//transferir para o componente\r\n    message,messages,setMessage,setMessages,\r\n    lastNumber,\r\n    isWhileCardOnPile\r\n}) => {\r\n\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n\r\n    const onCardPlayedHandler = (played_card) => { \r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,numberOfPlayedCard)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, numberOfPlayedCard)\r\n                    }\r\n                    \r\n                }else if(currentColor === colorOfPlayedCard) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 1','Player 2',played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n\r\n                            socketEmitUpdateGameState('Player 1', 'Player 2',\r\n                                played_card,updatedPlayer1Deck, \r\n                                colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"player2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\r\n                            socketEmitUpdateGameState('Player 2',\r\n                            'Player 1',\r\n                             played_card, updatedPlayer2Deck,colorOfPlayedCard,\r\n                              numberOfPlayedCard)\r\n                             \r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 2\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 2\",played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 2\",\"Player 1\",played_card\r\n                                ,updatedPlayer2Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,404)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card,404)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 1\",played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 1\",played_card,updatedPlayer1Deck,\r\n                                colorOfPlayedCard,404)\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 1','Player 1',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 1','Player 1',played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard, 404)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card, 252 )\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card, 252)\r\n                    }\r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,300)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 300)\r\n                    }\r\n                    \r\n                }\r\n                else{\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        wildCard('Player 1','Player 2',played_card,\r\n                         player1Deck.length===2 && !isUnoButtonPressed)\r\n    \r\n                    }\r\n                    else {\r\n                        wildCard('Player 2','Player 1',played_card,\r\n                        player2Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }\r\n                \r\n                break;\r\n            }\r\n            case 'WHILE_R': case 'WHILE_G': case 'WHILE_B': case 'WHILE_Y': {\r\n                const colorOfPlayedCard = played_card.charAt(played_card.length-1)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card, 100)\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card,100)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard){\r\n                    if(cardPlayedBy === 'Player 1'){\r\n                        whileCard('Player 1','Player 2',played_card,colorOfPlayedCard,\r\n                        player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }else{\r\n                        whileCard(\"Player 2\",'Player 1',played_card, colorOfPlayedCard,\r\n                            player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }else{\r\n                    alert('Invalid Move!')\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'BREAK_R': case 'BREAK_G': case 'BREAK_B': case 'BREAK_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    breakCard('Player 1',turn,played_card)\r\n                }else{\r\n                    breakCard('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            case 'PASS_R': case 'PASS_G': case 'PASS_B': case 'PASS_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    pass('Player 1',turn,played_card)\r\n                }else{\r\n                    pass('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            case 'JOKER_W': {\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    jokerCard('Player 1')\r\n                }else{\r\n                    jokerCard('Player 2')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,600)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 600)\r\n                    }\r\n                    \r\n                }else if(cardPlayedBy === 'Player 1') {\r\n                    drag4('Player 1',played_card,'Player 2',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n                else {\r\n                    drag4('Player 2',played_card,'Player 1',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    const drag2 = (player,played_card,colorOfPlayedCard,opponent,isForgotUno=false) => {\r\n        const nextTurn = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        \r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,nextTurn,played_card,colorOfPlayedCard,252,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card);\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n            socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,\r\n                colorOfPlayedCard,252,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const drag4 = (player,played_card,opponent,isForgotUno=false) => {\r\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n        //VERIFICAR POSSIBILIDADE DE BUG SE HOUVER MENOS DE 4 CARTAS A SEREM TIRADAS\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n        const opponentDrawCard3 = modifiedDeck.pop()\r\n        const opponentDrawCard4 = modifiedDeck.pop()      \r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2,opponentDrawCard3,opponentDrawCard4, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,player,played_card,newColor,600,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            \r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n               \r\n\r\n            socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,\r\n                newColor,600,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const wildCard = (player,turn,played_card,isForgotUno=false) => {\r\n       let newColor = prompt('Enter first letter of new color (R/G/B/Y)')\r\n       if(newColor){\r\n        newColor = newColor.toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n            if(isForgotUno){\r\n                forgotUno(player,turn,played_card,newColor,300)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card);\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n                !isSoundMuted && playWildCardSound()\r\n                socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n                    newColor,300)\r\n            }\r\n        }else{\r\n            alert(\"Invalid Color!\")\r\n        }\r\n    }\r\n        \r\n    const whileCard = (player,turn,played_card,colorOfPlayedCard,isForgotUno=false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player, turn, played_card, colorOfPlayedCard, 100,null,null,true)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n            colorOfPlayedCard,100,null,null,true)\r\n        }\r\n    }\r\n\r\n    const whileCardLoop = (player, played_card, numberOfPlayedCard) => {\r\n    \r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        const nextTurnIfSuccessfullPlay = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        //Verifica se o card jogado contém o mesmo número da última carta numérica presente\r\n        //na mesa\r\n        const removeIndex = playerDeck.indexOf(played_card)\r\n        const updatedPlayerDeck = \r\n        [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        if(lastNumber === numberOfPlayedCard){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed) {\r\n                    forgotUno(player,nextTurnIfSuccessfullPlay,played_card,colorOfPlayedCard,numberOfPlayedCard, null,null,false)\r\n            }else{\r\n                socketEmitUpdateGameState(player,nextTurnIfSuccessfullPlay,played_card,updatedPlayerDeck,\r\n                    colorOfPlayedCard,numberOfPlayedCard,null,null,false)\r\n            }\r\n        }else{\r\n            alert(\"Number \" + lastNumber + \" required!\")\r\n        }\r\n    }\r\n\r\n    const breakCard = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como carta break\r\n        else if( (colorOfPlayedCard === currentColor || currentNumber == 101 ) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        else{\r\n            alert(`Moviment Invalid! Current Color: ${currentColor}`)\r\n        }\r\n       \r\n    }\r\n\r\n    const pass = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como uma carta \"numérica\"\r\n        else if((colorOfPlayedCard === currentColor || 102 == currentNumber) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        else{\r\n            alert(\"Moviment Invalid!\")\r\n        }\r\n       \r\n    }\r\n\r\n    const jokerCard = (player, updatedDrawCardPile=null) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = player == 'Player 1' ? 'Player 2' : 'Player 1';\r\n\r\n        let cardWithoutColor = playedCardsPile[playedCardsPile.length - 1]\r\n        cardWithoutColor = cardWithoutColor.split('_')[0]\r\n\r\n        let jokerCardTransform = ''\r\n        let nextNumber = '';\r\n\r\n        if(cardWithoutColor == 'BREAK' || cardWithoutColor == 'PASS' ||\r\n           cardWithoutColor == 'W'     || cardWithoutColor == 'WHILE'||\r\n           cardWithoutColor == 'D4W'   || cardWithoutColor.includes('D2') ||\r\n           cardWithoutColor.includes('skip')) {\r\n\r\n            jokerCardTransform = 'JOKER_' + currentColor\r\n            nextNumber = 700\r\n        }else if(cardWithoutColor[0] >= 0 && cardWithoutColor[0] <= 9){\r\n\r\n            jokerCardTransform = `JOKER_${currentNumber}_${currentColor}`\r\n            nextNumber = currentNumber\r\n        }\r\n        if(updatedDrawCardPile){\r\n            socketEmitUpdateGameState(player,nextTurn,jokerCardTransform,playerDeck,currentColor,nextNumber,updatedDrawCardPile,null,false)\r\n            console.table([player,nextTurn,jokerCardTransform,playerDeck,currentColor,nextNumber,updatedDrawCardPile,null,false])\r\n\r\n        }else if(playerDeck.length===2 && !isUnoButtonPressed && nextNumber != '' && jokerCardTransform != ''){\r\n\r\n            forgotUno(player, nextTurn, jokerCardTransform,currentColor,nextNumber)\r\n        }else if(nextNumber != '' && jokerCardTransform != ''){\r\n            const removeIndex = playerDeck.indexOf('JOKER_W')\r\n            const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n\r\n            socketEmitUpdateGameState(player, nextTurn, jokerCardTransform, updatedPlayerDeck,currentColor,nextNumber,null,null,false)\r\n        }else{\r\n            alert('Invalid move!')\r\n        }\r\n\r\n    }\r\n\r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        //check who drew the card and return new state accordingly\r\n        \r\n        if(cardDrawnBy === 'Player 1') {\r\n            \r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            console.log('JOGADOR 1: ')\r\n            console.log('drawCard: ',drawCard)\r\n            \r\n            if(drawCard == 'JOKER_W') {\r\n                jokerCard('Player 1', copiedDrawCardPileArray)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,101,copiedDrawCardPileArray )\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 1',drawCard,player1Deck,colorOfDrawnCard,101,copiedDrawCardPileArray)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 1',drawCard,player1Deck,colorOfDrawnCard,102,copiedDrawCardPileArray,null,true )\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,102,copiedDrawCardPileArray )\r\n            }\r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,numberOfDrawnCard,copiedDrawCardPileArray )\r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 1',drawCard,player1Deck,colorOfDrawnCard,404,copiedDrawCardPileArray )\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n            \r\n                const player2Updated = [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)]\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,252,copiedDrawCardPileArray,player2Updated)\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,newColor,300,copiedDrawCardPileArray)\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n\r\n                const player2Updated = [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)]\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,newColor,600,copiedDrawCardPileArray,player2Updated)\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,numberOfDrawnCard,copiedDrawCardPileArray,null,true)\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) ) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 1','Player 2',drawCard,player1Deck,colorOfDrawnCard,numberOfDrawnCard, copiedDrawCardPileArray)\r\n            }\r\n\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            console.log('JOGADOR 2: ')\r\n\r\n            console.log('drawCard: ',drawCard)\r\n            if(drawCard == 'JOKER_W') {\r\n                jokerCard('Player 2', copiedDrawCardPileArray)\r\n            }else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2', 'Player 1',drawCard,player2Deck,colorOfDrawnCard,101,copiedDrawCardPileArray)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2', 'Player 2',drawCard,player2Deck,colorOfDrawnCard,101,copiedDrawCardPileArray)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 2',drawCard,player2Deck,colorOfDrawnCard,102,copiedDrawCardPileArray,null,true)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,colorOfDrawnCard,102,copiedDrawCardPileArray)\r\n            }\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,colorOfDrawnCard,numberOfDrawnCard,copiedDrawCardPileArray)\r\n               \r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 2',drawCard,colorOfDrawnCard,404, copiedDrawCardPileArray)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n            \r\n                const player1Updated = [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)]\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,colorOfDrawnCard,252,copiedDrawCardPileArray,player1Updated)\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,newColor,300,copiedDrawCardPileArray)\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n\r\n                const player1Updated = [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)]\r\n                socketEmitUpdateGameState('Player 2','Player 2',drawCard,player2Deck,newColor,600,copiedDrawCardPileArray,player1Updated)\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,colorOfDrawnCard,numberOfDrawnCard,copiedDrawCardPileArray,null,true)\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor)) {\r\n            \r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n\r\n                socketEmitUpdateGameState('Player 2','Player 1',drawCard,player2Deck,colorOfDrawnCard,numberOfDrawnCard,copiedDrawCardPileArray,null,drawCard.includes('WHILE'))\r\n            }\r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const forgotUno = (player,turn, played_card, colorOfPlayedCard,numberOfPlayedCard, opponentsDeck=null, modifiedDeck=null, isWhileCardOnPile = false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const removeIndex = playerDeck.indexOf(played_card);\r\n\r\n        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n        //make a copy of drawCardPile array\r\n        const copiedDrawCardPileArray = modifiedDeck != null ? modifiedDeck : drawCardPile\r\n        //pull out last two elements from it\r\n        const drawCard1 = copiedDrawCardPileArray.pop()\r\n        const drawCard2 = copiedDrawCardPileArray.pop()\r\n\r\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n        updatedPlayerDeck.push(drawCard1)\r\n        updatedPlayerDeck.push(drawCard2)\r\n        /**\r\n         * TODO: Parametrizar lógica do Som\r\n         * !isSoundMuted && playShufflingSound()*/\r\n\r\n        socketEmitUpdateGameState(player,\r\n            turn,played_card,updatedPlayerDeck, colorOfPlayedCard,numberOfPlayedCard,\r\n            copiedDrawCardPileArray, opponentsDeck, isWhileCardOnPile)\r\n    }\r\n        /**\r\n         * modifiedDrawCardPile -> Caso haja alteração no baralho antes de executar a função\r\n         * oponnentsDeck -> Caso o deck do oponente seja modificado, passar este parâmetro\r\n         */\r\n    const socketEmitUpdateGameState = (\r\n                                        winner,\r\n                                        turn,\r\n                                        played_card,\r\n                                        updatedPlayerDeck,\r\n                                        colorOfPlayedCard,\r\n                                        numberOfPlayedCard,\r\n                                        modifiedDrawCardPile = null,\r\n                                        opponentsDeck = null,\r\n                                        isWhileCardOnPile = false) => {\r\n\r\n        let obj = \"\";\r\n        const currentColorOfPlayedCard = colorOfPlayedCard ? colorOfPlayedCard : currentColor;\r\n        const currentNumberOfPlayedCard = numberOfPlayedCard ? numberOfPlayedCard : currentNumber;\r\n\r\n        let ln = ''\r\n        try{\r\n            ln =( typeof parseInt(currentNumber) == 'number') && (currentNumber < 10 )? currentNumber : lastNumber\r\n        }catch(message){\r\n            ln = currentNumber\r\n        }\r\n\r\n        if(winner=='Player 1'){\r\n          obj =  opponentsDeck !== null ? \r\n            {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                player2Deck:[...opponentsDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }else{\r\n            obj =  opponentsDeck !== null ? {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...opponentsDeck],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }\r\n\r\n        socket.emit('updateGameState', obj)\r\n    }\r\n\r\n\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n\r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    const expectedTurnForSpinner = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n    \r\n  return (\r\n      <div>\r\n            <div className={ player == 'Player 1'? 'player2Deck' :'player1Deck'} style={{pointerEvents: 'none'}}>\r\n                <p className='playerDeckText'>{player == 'Player 1' ? 'Player 2' : 'Player 1'}</p>\r\n                { player == 'Player 1' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                {turn===expectedTurnForSpinner && <Spinner />}\r\n            </div>\r\n            <br />\r\n            <div className='middleInfo' style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <button className='button-baralho' disabled={turn !== player} onClick={onCardDrawnHandler}> \r\n                <div class='red-circle'> \r\n                DRAW CARD\r\n                </div>\r\n                </button>\r\n                {playedCardsPile && playedCardsPile.length>0 &&\r\n                <img\r\n                    className='Card'\r\n                    src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                    /> }\r\n                {turn == 'Player 1' &&\r\n                    <button className='button-uno' disabled={player1Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n\r\n                {turn == 'Player 2' &&\r\n                    <button className='button-uno' disabled={player2Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className={player=='Player 1' ? 'player1Deck' : 'player2Deck'} style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <p className='playerDeckText'>{ player }</p>\r\n                { player == 'Player 1' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chatBoxWrapper\">\r\n                <div className={player == 'Player 1' ? \"chat-box chat-box-player1\" : \"chat-box chat-box-player2\"}>\r\n                    <div className=\"chat-head\">\r\n                        <h2>Chat Box</h2>\r\n                        {!isChatBoxHidden ?\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                    </div>\r\n                    <div className=\"chat-body\">\r\n                        <div className=\"msg-insert\">\r\n                            {messages.map(msg => {\r\n                                if(msg.user === 'Player 2')\r\n                                    return <div className=\"msg-receive\">{msg.text}</div>\r\n                                if(msg.user === 'Player 1')\r\n                                    return <div className=\"msg-send\">{msg.text}</div>\r\n                            })}\r\n                        </div>\r\n                        <div className=\"chat-text\">\r\n                            <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n      </div>\r\n  )}\r\n\r\nexport default VisaoPlayer","C:\\Users\\matheus.scheffer\\Documents\\client-devuno\\src\\customHooks\\useWhileCard.js",["133"],"import React,{useEffect,useState} from 'react'\r\n\r\n\r\nconst useWhileCard = () => {\r\n    const [state,setState] = useState('')\r\n    console.log('Entrando em useWhileCard')\r\n    useEffect(() =>{\r\n        console.log('Atualizando dentro useEffect')\r\n            setState((newState) => {\r\n                const cardName = newState.cardName ? newState.cardName : '';\r\n                const lastNumber = typeof newState.lastNumber == 'number' ? newState : ''\r\n\r\n                if(lastNumber){        \r\n                    return {\r\n                        cardName: cardName,\r\n                        lastNumber: lastNumber,\r\n                    }\r\n                }\r\n            })\r\n    },[])\r\n\r\n    \r\n    return [state,setState]\r\n}\r\n\r\nexport default useWhileCard",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":6,"column":8,"nodeType":"140","messageId":"141","endLine":6,"endColumn":15},{"ruleId":"138","severity":1,"message":"142","line":19,"column":8,"nodeType":"140","messageId":"141","endLine":19,"endColumn":20},{"ruleId":"138","severity":1,"message":"143","line":20,"column":10,"nodeType":"140","messageId":"141","endLine":20,"endColumn":17},{"ruleId":"138","severity":1,"message":"144","line":43,"column":18,"nodeType":"140","messageId":"141","endLine":43,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":70,"column":8,"nodeType":"147","endLine":70,"endColumn":10,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":85,"column":12,"nodeType":"140","messageId":"141","endLine":85,"endColumn":27},{"ruleId":"138","severity":1,"message":"150","line":85,"column":29,"nodeType":"140","messageId":"141","endLine":85,"endColumn":45},{"ruleId":"138","severity":1,"message":"151","line":86,"column":12,"nodeType":"140","messageId":"141","endLine":86,"endColumn":30},{"ruleId":"138","severity":1,"message":"152","line":91,"column":12,"nodeType":"140","messageId":"141","endLine":91,"endColumn":24},{"ruleId":"138","severity":1,"message":"153","line":173,"column":19,"nodeType":"140","messageId":"141","endLine":173,"endColumn":36},{"ruleId":"145","severity":1,"message":"154","line":207,"column":8,"nodeType":"147","endLine":207,"endColumn":10,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":214,"column":21,"nodeType":"158","endLine":214,"endColumn":69},{"ruleId":"159","severity":1,"message":"160","line":3,"column":1,"nodeType":"161","endLine":14,"endColumn":2},{"ruleId":"138","severity":1,"message":"162","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"142","line":6,"column":8,"nodeType":"140","messageId":"141","endLine":6,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":39,"column":9,"nodeType":"165","messageId":"166","endLine":373,"endColumn":10},{"ruleId":"167","severity":1,"message":"168","line":45,"column":34,"nodeType":"169","messageId":"170","endLine":45,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":46,"column":37,"nodeType":"169","messageId":"170","endLine":46,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":143,"column":34,"nodeType":"169","messageId":"170","endLine":143,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":144,"column":37,"nodeType":"169","messageId":"170","endLine":144,"endColumn":39},{"ruleId":"138","severity":1,"message":"171","line":175,"column":31,"nodeType":"140","messageId":"141","endLine":175,"endColumn":42},{"ruleId":"138","severity":1,"message":"171","line":198,"column":31,"nodeType":"140","messageId":"141","endLine":198,"endColumn":42},{"ruleId":"138","severity":1,"message":"171","line":217,"column":31,"nodeType":"140","messageId":"141","endLine":217,"endColumn":42},{"ruleId":"167","severity":1,"message":"168","line":244,"column":34,"nodeType":"169","messageId":"170","endLine":244,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":245,"column":37,"nodeType":"169","messageId":"170","endLine":245,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":285,"column":34,"nodeType":"169","messageId":"170","endLine":285,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":286,"column":37,"nodeType":"169","messageId":"170","endLine":286,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":309,"column":34,"nodeType":"169","messageId":"170","endLine":309,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":310,"column":37,"nodeType":"169","messageId":"170","endLine":310,"endColumn":39},{"ruleId":"172","severity":1,"message":"173","line":356,"column":25,"nodeType":"174","messageId":"175","endLine":371,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":358,"column":34,"nodeType":"169","messageId":"170","endLine":358,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":359,"column":37,"nodeType":"169","messageId":"170","endLine":359,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":377,"column":33,"nodeType":"169","messageId":"170","endLine":377,"endColumn":35},{"ruleId":"167","severity":1,"message":"168","line":379,"column":35,"nodeType":"169","messageId":"170","endLine":379,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":381,"column":37,"nodeType":"169","messageId":"170","endLine":381,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":405,"column":35,"nodeType":"169","messageId":"170","endLine":405,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":406,"column":37,"nodeType":"169","messageId":"170","endLine":406,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":436,"column":35,"nodeType":"169","messageId":"170","endLine":436,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":454,"column":35,"nodeType":"169","messageId":"170","endLine":454,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":469,"column":35,"nodeType":"169","messageId":"170","endLine":469,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":470,"column":50,"nodeType":"169","messageId":"170","endLine":470,"endColumn":52},{"ruleId":"167","severity":1,"message":"168","line":492,"column":35,"nodeType":"169","messageId":"170","endLine":492,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":493,"column":31,"nodeType":"169","messageId":"170","endLine":493,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":506,"column":71,"nodeType":"169","messageId":"170","endLine":506,"endColumn":73},{"ruleId":"167","severity":1,"message":"168","line":525,"column":35,"nodeType":"169","messageId":"170","endLine":525,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":526,"column":31,"nodeType":"169","messageId":"170","endLine":526,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":541,"column":60,"nodeType":"169","messageId":"170","endLine":541,"endColumn":62},{"ruleId":"167","severity":1,"message":"168","line":559,"column":35,"nodeType":"169","messageId":"170","endLine":559,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":560,"column":33,"nodeType":"169","messageId":"170","endLine":560,"endColumn":35},{"ruleId":"167","severity":1,"message":"168","line":568,"column":29,"nodeType":"169","messageId":"170","endLine":568,"endColumn":31},{"ruleId":"167","severity":1,"message":"168","line":568,"column":60,"nodeType":"169","messageId":"170","endLine":568,"endColumn":62},{"ruleId":"167","severity":1,"message":"168","line":569,"column":29,"nodeType":"169","messageId":"170","endLine":569,"endColumn":31},{"ruleId":"167","severity":1,"message":"168","line":569,"column":60,"nodeType":"169","messageId":"170","endLine":569,"endColumn":62},{"ruleId":"167","severity":1,"message":"168","line":570,"column":29,"nodeType":"169","messageId":"170","endLine":570,"endColumn":31},{"ruleId":"167","severity":1,"message":"176","line":584,"column":77,"nodeType":"169","messageId":"170","endLine":584,"endColumn":79},{"ruleId":"167","severity":1,"message":"176","line":584,"column":105,"nodeType":"169","messageId":"170","endLine":584,"endColumn":107},{"ruleId":"167","severity":1,"message":"176","line":587,"column":29,"nodeType":"169","messageId":"170","endLine":587,"endColumn":31},{"ruleId":"167","severity":1,"message":"176","line":587,"column":57,"nodeType":"169","messageId":"170","endLine":587,"endColumn":59},{"ruleId":"167","severity":1,"message":"168","line":618,"column":25,"nodeType":"169","messageId":"170","endLine":618,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":645,"column":39,"nodeType":"169","messageId":"170","endLine":645,"endColumn":41},{"ruleId":"167","severity":1,"message":"176","line":653,"column":39,"nodeType":"169","messageId":"170","endLine":653,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":714,"column":40,"nodeType":"169","messageId":"170","endLine":714,"endColumn":42},{"ruleId":"167","severity":1,"message":"168","line":745,"column":25,"nodeType":"169","messageId":"170","endLine":745,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":772,"column":39,"nodeType":"169","messageId":"170","endLine":772,"endColumn":41},{"ruleId":"167","severity":1,"message":"176","line":782,"column":39,"nodeType":"169","messageId":"170","endLine":782,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":844,"column":40,"nodeType":"169","messageId":"170","endLine":844,"endColumn":42},{"ruleId":"167","severity":1,"message":"168","line":866,"column":35,"nodeType":"169","messageId":"170","endLine":866,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":913,"column":18,"nodeType":"169","messageId":"170","endLine":913,"endColumn":20},{"ruleId":"167","severity":1,"message":"168","line":999,"column":43,"nodeType":"169","messageId":"170","endLine":999,"endColumn":45},{"ruleId":"167","severity":1,"message":"168","line":1003,"column":37,"nodeType":"169","messageId":"170","endLine":1003,"endColumn":39},{"ruleId":"167","severity":1,"message":"168","line":1004,"column":55,"nodeType":"169","messageId":"170","endLine":1004,"endColumn":57},{"ruleId":"167","severity":1,"message":"168","line":1005,"column":26,"nodeType":"169","messageId":"170","endLine":1005,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":1006,"column":21,"nodeType":"158","endLine":1011,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":1013,"column":26,"nodeType":"169","messageId":"170","endLine":1013,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":1014,"column":21,"nodeType":"158","endLine":1019,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":1031,"column":17,"nodeType":"158","endLine":1034,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":1035,"column":23,"nodeType":"169","messageId":"170","endLine":1035,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":1042,"column":23,"nodeType":"169","messageId":"170","endLine":1042,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":1050,"column":35,"nodeType":"169","messageId":"170","endLine":1050,"endColumn":37},{"ruleId":"167","severity":1,"message":"168","line":1052,"column":26,"nodeType":"169","messageId":"170","endLine":1052,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":1053,"column":21,"nodeType":"158","endLine":1058,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":1060,"column":26,"nodeType":"169","messageId":"170","endLine":1060,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":1061,"column":21,"nodeType":"158","endLine":1066,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":1071,"column":40,"nodeType":"169","messageId":"170","endLine":1071,"endColumn":42},{"ruleId":"177","severity":1,"message":"178","line":1080,"column":47,"nodeType":"179","messageId":"180","endLine":1080,"endColumn":49},{"ruleId":"138","severity":1,"message":"181","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'useWhileCard' is defined but never used.","'waitFor' is defined but never used.","'setRoom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.","ArrayExpression",["184"],"'isChatBoxHidden' is assigned a value but never used.","'setChatBoxHidden' is assigned a value but never used.","'isUnoButtonPressed' is assigned a value but never used.","'playUnoSound' is assigned a value but never used.","'booleanWhieldCard' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'playGameOverSound'. Either include it or remove the dependency array.",["185"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'removeIndex' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [room]",{"range":"190","text":"191"},"Update the dependencies array to be: [playGameOverSound]",{"range":"192","text":"193"},[2476,2478],"[room]",[9095,9097],"[playGameOverSound]"]