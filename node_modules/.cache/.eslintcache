[{"C:\\Users\\marja\\projeto\\client-devuno\\src\\index.js":"1","C:\\Users\\marja\\projeto\\client-devuno\\src\\App.js":"2","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Homepage.js":"3","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Game.js":"4","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Spinner.js":"5","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\randomCodeGenerator.js":"6","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\packOfCards.js":"7","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\shuffleArray.js":"8","C:\\Users\\marja\\projeto\\client-devuno\\src\\pageComponents\\visaoPlayer.js":"9","C:\\Users\\marja\\projeto\\client-devuno\\src\\customHooks\\useWhileCard.js":"10"},{"size":320,"mtime":1654555952790,"results":"11","hashOfConfig":"12"},{"size":356,"mtime":1654555952523,"results":"13","hashOfConfig":"12"},{"size":1294,"mtime":1654559521245,"results":"14","hashOfConfig":"12"},{"size":43823,"mtime":1655147521846,"results":"15","hashOfConfig":"12"},{"size":152,"mtime":1654555952787,"results":"16","hashOfConfig":"12"},{"size":368,"mtime":1654555952795,"results":"17","hashOfConfig":"12"},{"size":1008,"mtime":1654559521250,"results":"18","hashOfConfig":"12"},{"size":264,"mtime":1654555952795,"results":"19","hashOfConfig":"12"},{"size":43520,"mtime":1657655678976,"results":"20","hashOfConfig":"12"},{"size":757,"mtime":1654555952789,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"10o6df",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\marja\\projeto\\client-devuno\\src\\index.js",[],["46","47"],"C:\\Users\\marja\\projeto\\client-devuno\\src\\App.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Homepage.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Game.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68"],"import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport VisaoPlayer from '../pageComponents/visaoPlayer'\r\nimport useSound from 'use-sound'\r\nimport devunoWhite from '../assets/devuno/devuno_logo_white.png'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\nimport { waitFor } from '@testing-library/react'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n//WHILECARD - 100\r\n//BREAK - 101\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'http://localhost:5000'\r\n\r\nconst Game = (props) => {\r\n    const [lastNumber, setLastNumber] = useState('')\r\n    const [isWhileCardOnPile, setIsWhileCardOnPile] = useState('')\r\n\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R'      || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG'    || shuffledCards[startingCardIndex]==='_G'      || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB'    || shuffledCards[startingCardIndex]==='_B'      || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY'    || shuffledCards[startingCardIndex]==='_Y'      || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W'        || shuffledCards[startingCardIndex]==='D4W'     ||\r\n            shuffledCards[startingCardIndex]==='WHILE_R'  || shuffledCards[startingCardIndex]==='WHILE_G' || \r\n            shuffledCards[startingCardIndex]==='WHILE_B'  || shuffledCards[startingCardIndex]==='WHILE_Y' ||\r\n            shuffledCards[startingCardIndex]==='BREAK_R'  || shuffledCards[startingCardIndex]==='BREAK_G' || \r\n            shuffledCards[startingCardIndex]==='BREAK_B'  || shuffledCards[startingCardIndex]==='BREAK_Y'\r\n            \r\n            ) {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile],\r\n            lastNumber: playedCardsPile[0].charAt(0),\r\n            isWhileCardOnPile: false\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile }) => {\r\n            \r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n            setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(isWhileCardOnPile)\r\n  /*           setWhileCardConf(whileCardConf)\r\n            \r\n            console.log(\"Current number conf init: \",currentNumber)\r\n            console.log(\"While card conf init: \",whileCardConf) */\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile = false}) => {\r\n            console.log(\"drawnCardPile: \",drawCardPile)\r\n            const booleanWhieldCard = isWhileCardOnPile !== undefined ? isWhileCardOnPile : false\r\n//            const verifiedLastNumber = lastNumber !== undefined ? lastNumber : \r\n\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n           // whileCardConf && setWhileCardConf(whileCardConf)\r\n            \r\n            lastNumber && setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(booleanWhieldCard)\r\n            //console.log(\"While card conf update: \",whileCardConf)\r\n            console.log(\"Current number update: \",currentNumber)\r\n            console.log(\"Last number conf update: \",lastNumber)\r\n            console.log('isWhileCardOnPile update: ', isWhileCardOnPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n\r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        console.log('Turn on top: ', turn)\r\n        console.log('isWhileCardOnPile on top :',isWhileCardOnPile)\r\n        //check who drew the card and return new state accordingly\r\n        \r\n        if(cardDrawnBy === 'Player 1') {\r\n            \r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            console.log('JOGADOR 1: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n            \r\n            \r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard == lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'W' :\",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') :\",(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) :\",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) )\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                console.log('just add the drawn card to player1 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            console.log('JOGADOR 2: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n\r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard === lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n               \r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'D4W'\",drawCard === 'D4W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor)) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: drawCard.includes('WHILE')\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n\r\n            \r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                console.log('just add the drawn card to player 2 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n                {console.log(\"GameJS: \",isWhileCardOnPile)}\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img className='topInfoImg' src={devunoWhite} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button-sound' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button-sound' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>  \r\n\r\n                       { <VisaoPlayer  player='Player 1'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n\r\n                        />}\r\n                        </>\r\n                        }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n\r\n                                  <VisaoPlayer  player='Player 2'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n                                />\r\n                        </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button-quit\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Spinner.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\randomCodeGenerator.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\packOfCards.js",["69"],"//pack of 108 cards (_ = reverse)\r\nexport default [\r\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\r\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\r\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\r\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\r\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W',\r\n    'WHILE_R','WHILE_G','WHILE_B','WHILE_Y',\r\n    'BREAK_R','BREAK_R','BREAK_R','BREAK_G','BREAK_G','BREAK_G','BREAK_B','BREAK_B','BREAK_B','BREAK_Y','BREAK_Y','BREAK_Y',\r\n    'PASS_R','PASS_R','PASS_G','PASS_G','PASS_B','PASS_B','PASS_Y','PASS_Y'\r\n]","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\shuffleArray.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\pageComponents\\visaoPlayer.js",["70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"C:\\Users\\marja\\projeto\\client-devuno\\src\\customHooks\\useWhileCard.js",["124"],"import React,{useEffect,useState} from 'react'\r\n\r\n\r\nconst useWhileCard = () => {\r\n    const [state,setState] = useState('')\r\n    console.log('Entrando em useWhileCard')\r\n    useEffect(() =>{\r\n        console.log('Atualizando dentro useEffect')\r\n            setState((newState) => {\r\n                const cardName = newState.cardName ? newState.cardName : '';\r\n                const lastNumber = typeof newState.lastNumber == 'number' ? newState : ''\r\n\r\n                if(lastNumber){        \r\n                    return {\r\n                        cardName: cardName,\r\n                        lastNumber: lastNumber,\r\n                    }\r\n                }\r\n            })\r\n    },[])\r\n\r\n    \r\n    return [state,setState]\r\n}\r\n\r\nexport default useWhileCard",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":15},{"ruleId":"129","severity":1,"message":"133","line":19,"column":8,"nodeType":"131","messageId":"132","endLine":19,"endColumn":20},{"ruleId":"129","severity":1,"message":"134","line":20,"column":10,"nodeType":"131","messageId":"132","endLine":20,"endColumn":17},{"ruleId":"129","severity":1,"message":"135","line":41,"column":18,"nodeType":"131","messageId":"132","endLine":41,"endColumn":25},{"ruleId":"136","severity":1,"message":"137","line":68,"column":8,"nodeType":"138","endLine":68,"endColumn":10,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"140","line":83,"column":12,"nodeType":"131","messageId":"132","endLine":83,"endColumn":27},{"ruleId":"129","severity":1,"message":"141","line":83,"column":29,"nodeType":"131","messageId":"132","endLine":83,"endColumn":45},{"ruleId":"129","severity":1,"message":"142","line":84,"column":12,"nodeType":"131","messageId":"132","endLine":84,"endColumn":30},{"ruleId":"129","severity":1,"message":"143","line":89,"column":12,"nodeType":"131","messageId":"132","endLine":89,"endColumn":24},{"ruleId":"136","severity":1,"message":"144","line":210,"column":8,"nodeType":"138","endLine":210,"endColumn":10,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":289,"column":39,"nodeType":"148","messageId":"149","endLine":289,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":290,"column":104,"nodeType":"148","messageId":"149","endLine":290,"endColumn":106},{"ruleId":"146","severity":1,"message":"150","line":305,"column":39,"nodeType":"148","messageId":"149","endLine":305,"endColumn":41},{"ruleId":"146","severity":1,"message":"150","line":306,"column":102,"nodeType":"148","messageId":"149","endLine":306,"endColumn":104},{"ruleId":"146","severity":1,"message":"147","line":406,"column":40,"nodeType":"148","messageId":"149","endLine":406,"endColumn":42},{"ruleId":"146","severity":1,"message":"147","line":501,"column":39,"nodeType":"148","messageId":"149","endLine":501,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":502,"column":105,"nodeType":"148","messageId":"149","endLine":502,"endColumn":107},{"ruleId":"146","severity":1,"message":"150","line":518,"column":39,"nodeType":"148","messageId":"149","endLine":518,"endColumn":41},{"ruleId":"146","severity":1,"message":"150","line":519,"column":102,"nodeType":"148","messageId":"149","endLine":519,"endColumn":104},{"ruleId":"146","severity":1,"message":"147","line":621,"column":40,"nodeType":"148","messageId":"149","endLine":621,"endColumn":42},{"ruleId":"151","severity":1,"message":"152","line":661,"column":21,"nodeType":"153","endLine":661,"endColumn":69},{"ruleId":"154","severity":1,"message":"155","line":2,"column":1,"nodeType":"156","endLine":11,"endColumn":2},{"ruleId":"129","severity":1,"message":"157","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":26},{"ruleId":"129","severity":1,"message":"133","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":20},{"ruleId":"158","severity":1,"message":"159","line":61,"column":9,"nodeType":"160","messageId":"161","endLine":399,"endColumn":10},{"ruleId":"146","severity":1,"message":"147","line":69,"column":35,"nodeType":"148","messageId":"149","endLine":69,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":70,"column":38,"nodeType":"148","messageId":"149","endLine":70,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":169,"column":35,"nodeType":"148","messageId":"149","endLine":169,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":170,"column":38,"nodeType":"148","messageId":"149","endLine":170,"endColumn":40},{"ruleId":"129","severity":1,"message":"162","line":202,"column":31,"nodeType":"131","messageId":"132","endLine":202,"endColumn":42},{"ruleId":"129","severity":1,"message":"162","line":226,"column":31,"nodeType":"131","messageId":"132","endLine":226,"endColumn":42},{"ruleId":"129","severity":1,"message":"162","line":245,"column":31,"nodeType":"131","messageId":"132","endLine":245,"endColumn":42},{"ruleId":"146","severity":1,"message":"147","line":272,"column":35,"nodeType":"148","messageId":"149","endLine":272,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":273,"column":38,"nodeType":"148","messageId":"149","endLine":273,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":315,"column":35,"nodeType":"148","messageId":"149","endLine":315,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":316,"column":38,"nodeType":"148","messageId":"149","endLine":316,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":339,"column":35,"nodeType":"148","messageId":"149","endLine":339,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":340,"column":38,"nodeType":"148","messageId":"149","endLine":340,"endColumn":40},{"ruleId":"163","severity":1,"message":"164","line":380,"column":25,"nodeType":"165","messageId":"166","endLine":397,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":382,"column":35,"nodeType":"148","messageId":"149","endLine":382,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":383,"column":38,"nodeType":"148","messageId":"149","endLine":383,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":403,"column":33,"nodeType":"148","messageId":"149","endLine":403,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":405,"column":35,"nodeType":"148","messageId":"149","endLine":405,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":407,"column":37,"nodeType":"148","messageId":"149","endLine":407,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":431,"column":35,"nodeType":"148","messageId":"149","endLine":431,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":432,"column":37,"nodeType":"148","messageId":"149","endLine":432,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":462,"column":39,"nodeType":"148","messageId":"149","endLine":462,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":480,"column":35,"nodeType":"148","messageId":"149","endLine":480,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":495,"column":35,"nodeType":"148","messageId":"149","endLine":495,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":496,"column":50,"nodeType":"148","messageId":"149","endLine":496,"endColumn":52},{"ruleId":"146","severity":1,"message":"147","line":521,"column":35,"nodeType":"148","messageId":"149","endLine":521,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":522,"column":31,"nodeType":"148","messageId":"149","endLine":522,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":536,"column":71,"nodeType":"148","messageId":"149","endLine":536,"endColumn":73},{"ruleId":"146","severity":1,"message":"147","line":555,"column":35,"nodeType":"148","messageId":"149","endLine":555,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":556,"column":31,"nodeType":"148","messageId":"149","endLine":556,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":557,"column":64,"nodeType":"148","messageId":"149","endLine":557,"endColumn":66},{"ruleId":"146","severity":1,"message":"147","line":572,"column":61,"nodeType":"148","messageId":"149","endLine":572,"endColumn":63},{"ruleId":"146","severity":1,"message":"147","line":590,"column":35,"nodeType":"148","messageId":"149","endLine":590,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":639,"column":20,"nodeType":"148","messageId":"149","endLine":639,"endColumn":22},{"ruleId":"146","severity":1,"message":"147","line":725,"column":43,"nodeType":"148","messageId":"149","endLine":725,"endColumn":45},{"ruleId":"146","severity":1,"message":"147","line":731,"column":36,"nodeType":"148","messageId":"149","endLine":731,"endColumn":38},{"ruleId":"146","severity":1,"message":"147","line":732,"column":55,"nodeType":"148","messageId":"149","endLine":732,"endColumn":57},{"ruleId":"146","severity":1,"message":"147","line":733,"column":25,"nodeType":"148","messageId":"149","endLine":733,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":734,"column":21,"nodeType":"153","endLine":739,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":741,"column":25,"nodeType":"148","messageId":"149","endLine":741,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":742,"column":21,"nodeType":"153","endLine":747,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":832,"column":21,"nodeType":"153","endLine":835,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":836,"column":23,"nodeType":"148","messageId":"149","endLine":836,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":843,"column":23,"nodeType":"148","messageId":"149","endLine":843,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":851,"column":36,"nodeType":"148","messageId":"149","endLine":851,"endColumn":38},{"ruleId":"146","severity":1,"message":"147","line":853,"column":25,"nodeType":"148","messageId":"149","endLine":853,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":854,"column":21,"nodeType":"153","endLine":859,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":861,"column":25,"nodeType":"148","messageId":"149","endLine":861,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":862,"column":21,"nodeType":"153","endLine":867,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":872,"column":40,"nodeType":"148","messageId":"149","endLine":872,"endColumn":42},{"ruleId":"167","severity":1,"message":"168","line":881,"column":47,"nodeType":"169","messageId":"170","endLine":881,"endColumn":49},{"ruleId":"129","severity":1,"message":"171","line":1,"column":8,"nodeType":"131","messageId":"132","endLine":1,"endColumn":13},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'useWhileCard' is defined but never used.","'waitFor' is defined but never used.","'setRoom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.","ArrayExpression",["174"],"'isChatBoxHidden' is assigned a value but never used.","'setChatBoxHidden' is assigned a value but never used.","'isUnoButtonPressed' is assigned a value but never used.","'playUnoSound' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'playGameOverSound'. Either include it or remove the dependency array.",["175"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'removeIndex' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [room]",{"range":"180","text":"181"},"Update the dependencies array to be: [playGameOverSound]",{"range":"182","text":"183"},[2447,2449],"[room]",[9174,9176],"[playGameOverSound]"]