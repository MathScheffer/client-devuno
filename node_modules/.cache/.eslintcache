[{"C:\\Users\\marja\\projeto\\client-devuno\\src\\index.js":"1","C:\\Users\\marja\\projeto\\client-devuno\\src\\App.js":"2","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Homepage.js":"3","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Game.js":"4","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Spinner.js":"5","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\randomCodeGenerator.js":"6","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\packOfCards.js":"7","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\shuffleArray.js":"8","C:\\Users\\marja\\projeto\\client-devuno\\src\\pageComponents\\visaoPlayer.js":"9","C:\\Users\\marja\\projeto\\client-devuno\\src\\customHooks\\useWhileCard.js":"10"},{"size":320,"mtime":1654555952790,"results":"11","hashOfConfig":"12"},{"size":356,"mtime":1654555952523,"results":"13","hashOfConfig":"12"},{"size":1294,"mtime":1654559521245,"results":"14","hashOfConfig":"12"},{"size":43800,"mtime":1654559521243,"results":"15","hashOfConfig":"12"},{"size":152,"mtime":1654555952787,"results":"16","hashOfConfig":"12"},{"size":368,"mtime":1654555952795,"results":"17","hashOfConfig":"12"},{"size":1008,"mtime":1654559521250,"results":"18","hashOfConfig":"12"},{"size":264,"mtime":1654555952795,"results":"19","hashOfConfig":"12"},{"size":39741,"mtime":1655051340622,"results":"20","hashOfConfig":"12"},{"size":757,"mtime":1654555952789,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"10o6df",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"C:\\Users\\marja\\projeto\\client-devuno\\src\\index.js",[],["47","48"],"C:\\Users\\marja\\projeto\\client-devuno\\src\\App.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Homepage.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Game.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69"],"import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport VisaoPlayer from '../pageComponents/visaoPlayer'\r\nimport useSound from 'use-sound'\r\nimport devunoWhite from '../assets/devuno/devuno_logo_white.png'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\nimport { waitFor } from '@testing-library/react'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n//WHILECARD - 100\r\n//BREAK - 101\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'http://localhost:5000'\r\n\r\nconst Game = (props) => {\r\n    const [lastNumber, setLastNumber] = useState('')\r\n    const [isWhileCardOnPile, setIsWhileCardOnPile] = useState('')\r\n\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R'      || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG'    || shuffledCards[startingCardIndex]==='_G'      || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB'    || shuffledCards[startingCardIndex]==='_B'      || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY'    || shuffledCards[startingCardIndex]==='_Y'      || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W'        || shuffledCards[startingCardIndex]==='D4W'     ||\r\n            shuffledCards[startingCardIndex]==='WHILE_R'  || shuffledCards[startingCardIndex]==='WHILE_G' || \r\n            shuffledCards[startingCardIndex]==='WHILE_B'  || shuffledCards[startingCardIndex]==='WHILE_Y' ||\r\n            shuffledCards[startingCardIndex]==='BREAK_R'  || shuffledCards[startingCardIndex]==='BREAK_G' || \r\n            shuffledCards[startingCardIndex]==='BREAK_B'  || shuffledCards[startingCardIndex]==='BREAK_Y'\r\n            \r\n            ) {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile],\r\n            lastNumber: playedCardsPile[0].charAt(0),\r\n            isWhileCardOnPile: false\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile }) => {\r\n            \r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n            setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(isWhileCardOnPile)\r\n  /*           setWhileCardConf(whileCardConf)\r\n            \r\n            console.log(\"Current number conf init: \",currentNumber)\r\n            console.log(\"While card conf init: \",whileCardConf) */\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile = false}) => {\r\n            console.log(\"drawnCardPile: \",drawCardPile)\r\n            const booleanWhieldCard = isWhileCardOnPile !== undefined ? isWhileCardOnPile : false\r\n//            const verifiedLastNumber = lastNumber !== undefined ? lastNumber : \r\n\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n           // whileCardConf && setWhileCardConf(whileCardConf)\r\n            \r\n            lastNumber && setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(booleanWhieldCard)\r\n            //console.log(\"While card conf update: \",whileCardConf)\r\n            console.log(\"Current number update: \",currentNumber)\r\n            console.log(\"Last number conf update: \",lastNumber)\r\n            console.log('isWhileCardOnPile update: ', isWhileCardOnPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n\r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        console.log('Turn on top: ', turn)\r\n        console.log('isWhileCardOnPile on top :',isWhileCardOnPile)\r\n        //check who drew the card and return new state accordingly\r\n        \r\n        if(cardDrawnBy === 'Player 1') {\r\n            \r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            console.log('JOGADOR 1: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n            \r\n            \r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard == lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'W' :\",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') :\",(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) :\",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) )\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                console.log('just add the drawn card to player1 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            console.log('JOGADOR 2: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n\r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard === lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n               \r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'D4W'\",drawCard === 'D4W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor)) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: drawCard.includes('WHILE')\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n\r\n            \r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                console.log('just add the drawn card to player 2 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n                {console.log(\"GameJS: \",isWhileCardOnPile)}\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={devunoWhite} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button-sound' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button-sound' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>  \r\n\r\n                       { <VisaoPlayer  player='Player 1'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n\r\n                        />}\r\n                        </>\r\n                        }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n\r\n                                  <VisaoPlayer  player='Player 2'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n                                />\r\n                        </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button-quit\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","C:\\Users\\marja\\projeto\\client-devuno\\src\\components\\Spinner.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\randomCodeGenerator.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\packOfCards.js",["70"],"//pack of 108 cards (_ = reverse)\r\nexport default [\r\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\r\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\r\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\r\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\r\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W',\r\n    'WHILE_R','WHILE_G','WHILE_B','WHILE_Y',\r\n    'BREAK_R','BREAK_R','BREAK_R','BREAK_G','BREAK_G','BREAK_G','BREAK_B','BREAK_B','BREAK_B','BREAK_Y','BREAK_Y','BREAK_Y',\r\n    'PASS_R','PASS_R','PASS_G','PASS_G','PASS_B','PASS_B','PASS_Y','PASS_Y'\r\n]","C:\\Users\\marja\\projeto\\client-devuno\\src\\utils\\shuffleArray.js",[],"C:\\Users\\marja\\projeto\\client-devuno\\src\\pageComponents\\visaoPlayer.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"import React, { useEffect, useState } from 'react'\r\nimport useSound from 'use-sound'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\n\r\nimport Spinner from '../components/Spinner'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\n\r\n\r\nconst VisaoPlayer = ({\r\n    player,\r\n    turn,\r\n    currentColor,\r\n    player1Deck,\r\n    player2Deck,\r\n    drawCardPile,\r\n    isSoundMuted,\r\n    playShufflingSound,\r\n    playedCardsPile,\r\n    currentNumber,\r\n    playSkipCardSound,\r\n    playDraw2CardSound,\r\n    playWildCardSound,\r\n    playDraw4CardSound,onCardDrawnHandler,\r\n    socket,\r\n//transferir para o componente\r\n    message,messages,setMessage,setMessages,\r\n    lastNumber,\r\n    isWhileCardOnPile\r\n}) => {\r\n\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        console.log('Turno de quem jogou a carta: ', turn)\r\n        console.log('Jogou a carta \"isWhileCardOnPile\": ',isWhileCardOnPile)\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                console.log('Current Number: ',currentNumber)\r\n                console.log('Current Color: ',currentNumber)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,numberOfPlayedCard)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, numberOfPlayedCard)\r\n                    }\r\n                    \r\n                }else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 1','Player 2',played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n\r\n                            socketEmitUpdateGameState('Player 1', 'Player 2',\r\n                                played_card,updatedPlayer1Deck, \r\n                                colorOfPlayedCard,numberOfPlayedCard,)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"player2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\r\n                            socketEmitUpdateGameState('Player 2',\r\n                            'Player 1',\r\n                             played_card, updatedPlayer2Deck,colorOfPlayedCard,\r\n                              numberOfPlayedCard)\r\n                             \r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 2\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 2\",played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 2\",\"Player 1\",played_card\r\n                                ,updatedPlayer2Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,404)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card,404)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 1\",played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 1\",played_card,updatedPlayer1Deck,\r\n                                colorOfPlayedCard,404)\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 1','Player 1',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 1','Player 1',played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard, 404)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card, 252 )\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card, 252)\r\n                    }\r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,300)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 300)\r\n                    }\r\n                    \r\n                }\r\n                else{\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        wildCard('Player 1','Player 2',played_card,\r\n                         player1Deck.length===2 && !isUnoButtonPressed)\r\n    \r\n                    }\r\n                    else {\r\n                        wildCard('Player 2','Player 1',played_card,\r\n                        player2Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }\r\n                \r\n                break;\r\n            }\r\n            case 'WHILE_R': case 'WHILE_G': case 'WHILE_B': case 'WHILE_Y': {\r\n                const colorOfPlayedCard = played_card.charAt(played_card.length-1)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card, 100)\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card,100)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard){\r\n                    if(cardPlayedBy === 'Player 1'){\r\n                        whileCard('Player 1','Player 2',played_card,colorOfPlayedCard,\r\n                        player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }else{\r\n                        whileCard(\"Player 2\",'Player 1',played_card, colorOfPlayedCard,\r\n                            player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }else{\r\n                    alert('Invalid Move!')\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'BREAK_R': case 'BREAK_G': case 'BREAK_B': case 'BREAK_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    breakCard('Player 1',turn,played_card)\r\n                }else{\r\n                    console.log('WhileCard: ', isWhileCardOnPile)\r\n                    breakCard('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            case 'PASS_R': case 'PASS_G': case 'PASS_B': case 'PASS_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    pass('Player 1',turn,played_card)\r\n                }else{\r\n                    console.log('WhileCard: ', isWhileCardOnPile)\r\n                    pass('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,600)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 600)\r\n                    }\r\n                    \r\n                }else if(cardPlayedBy === 'Player 1') {\r\n                    drag4('Player 1',played_card,'Player 2',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n                else {\r\n                    drag4('Player 2',played_card,'Player 1',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n\r\n                \r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    const drag2 = (player,played_card,colorOfPlayedCard,opponent,isForgotUno=false) => {\r\n        const nextTurn = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        \r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,nextTurn,played_card,colorOfPlayedCard,252,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card);\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n            socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,\r\n                colorOfPlayedCard,252,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const drag4 = (player,played_card,opponent,isForgotUno=false) => {\r\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n        //VERIFICAR POSSIBILIDADE DE BUG SE HOUVER MENOS DE 4 CARTAS A SEREM TIRADAS\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n        const opponentDrawCard3 = modifiedDeck.pop()\r\n        const opponentDrawCard4 = modifiedDeck.pop()      \r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2,opponentDrawCard3,opponentDrawCard4, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,player,played_card,newColor,600,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            \r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n               \r\n\r\n            socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,\r\n                newColor,600,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const wildCard = (player,turn,played_card,isForgotUno=false) => {\r\n       let newColor = prompt('Enter first letter of new color (R/G/B/Y)')\r\n       if(newColor){\r\n        newColor = newColor.toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n            if(isForgotUno){\r\n                forgotUno(player,turn,played_card,newColor,300)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card);\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n                !isSoundMuted && playWildCardSound()\r\n                socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n                    newColor,300)\r\n            }\r\n        }else{\r\n            alert(\"Invalid Color!\")\r\n        }\r\n    }\r\n        \r\n    const whileCard = (player,turn,played_card,colorOfPlayedCard,isForgotUno=false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player, turn, played_card, colorOfPlayedCard, 100,null,null,true)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n            colorOfPlayedCard,100,null,null,true)\r\n        }\r\n    }\r\n\r\n    const whileCardLoop = (player, played_card, numberOfPlayedCard) => {\r\n    \r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        const nextTurnIfSuccessfullPlay = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        //Verifica se o card jogado contém o mesmo número da última carta numérica presente\r\n        //na mesa\r\n        const removeIndex = playerDeck.indexOf(played_card)\r\n        const updatedPlayerDeck = \r\n        [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        if(lastNumber === numberOfPlayedCard){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed) {\r\n                    forgotUno(player,nextTurnIfSuccessfullPlay,played_card,colorOfPlayedCard,numberOfPlayedCard, null,null,false)\r\n            }else{\r\n                socketEmitUpdateGameState(player,nextTurnIfSuccessfullPlay,played_card,updatedPlayerDeck,\r\n                    colorOfPlayedCard,numberOfPlayedCard,null,null,false)\r\n            }\r\n        }else{\r\n            alert(\"Number \" + lastNumber + \" required!\")\r\n\r\n            //socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck)\r\n            console.log('updatedPlayerDeck: ', updatedPlayerDeck)\r\n        }\r\n    }\r\n\r\n    const breakCard = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n        console.log((currentNumber))\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como carta break\r\n        else if( (colorOfPlayedCard === currentColor || currentNumber == 101 ) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        else{\r\n            alert(\"Moviment Invalid!\")\r\n        }\r\n       \r\n    }\r\n\r\n    const pass = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n        console.log((colorOfPlayedCard === currentColor || 102 == currentNumber))\r\n\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como uma carta \"numérica\"\r\n        else if((colorOfPlayedCard === currentColor || 102 == currentNumber) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        else{\r\n            alert(\"Moviment Invalid!\")\r\n        }\r\n       \r\n    }\r\n\r\n    const forgotUno = (player,turn, played_card, colorOfPlayedCard,numberOfPlayedCard, opponentsDeck=null, modifiedDeck=null, isWhileCardOnPile = false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const removeIndex = playerDeck.indexOf(played_card);\r\n\r\n        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n        //make a copy of drawCardPile array\r\n        const copiedDrawCardPileArray = modifiedDeck != null ? modifiedDeck : drawCardPile\r\n        //pull out last two elements from it\r\n        const drawCard1 = copiedDrawCardPileArray.pop()\r\n        const drawCard2 = copiedDrawCardPileArray.pop()\r\n\r\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n        updatedPlayerDeck.push(drawCard1)\r\n        updatedPlayerDeck.push(drawCard2)\r\n        /**\r\n         * TODO: Parametrizar lógica do Som\r\n         * !isSoundMuted && playShufflingSound()*/\r\n\r\n        socketEmitUpdateGameState(player,\r\n            turn,played_card,updatedPlayerDeck, colorOfPlayedCard,numberOfPlayedCard,\r\n            copiedDrawCardPileArray, opponentsDeck, isWhileCardOnPile)\r\n    }\r\n        /**\r\n         * modifiedDrawCardPile -> Caso haja alteração no baralho antes de executar a função\r\n         * oponnentsDeck -> Caso o deck do oponente seja modificado, passar este parâmetro\r\n         */\r\n    const socketEmitUpdateGameState = (\r\n                                        winner,\r\n                                        turn,\r\n                                        played_card,\r\n                                        updatedPlayerDeck,\r\n                                        colorOfPlayedCard,\r\n                                        numberOfPlayedCard,\r\n                                        modifiedDrawCardPile = null,\r\n                                        opponentsDeck = null,\r\n                                        isWhileCardOnPile = false) => {\r\n\r\n        let obj = \"\";\r\n        const currentColorOfPlayedCard = colorOfPlayedCard ? colorOfPlayedCard : currentColor;\r\n        const currentNumberOfPlayedCard = numberOfPlayedCard ? numberOfPlayedCard : currentNumber;\r\n\r\n        let ln = ''\r\n        try{\r\n            ln =( typeof parseInt(currentNumber) == 'number') && (currentNumber < 10 )? currentNumber : lastNumber\r\n            console.log('Try currentnumber: ',{currentNumber:currentNumber, ln: ln})\r\n        }catch(message){\r\n            ln = currentNumber\r\n            console.log('Catch currentnumber: ',{currentNumber:currentNumber, ln: ln})\r\n        }\r\n\r\n        if(winner=='Player 1'){\r\n          obj =  opponentsDeck !== null ? \r\n            {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                player2Deck:[...opponentsDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }else{\r\n            obj =  opponentsDeck !== null ? {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...opponentsDeck],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }\r\n\r\n        socket.emit('updateGameState', obj)\r\n    }\r\n\r\n\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n\r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    const expectedTurnForSpinner = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n    \r\n  return (\r\n      \r\n      <div>\r\n          {console.log(\"visaoPlayer: \",isWhileCardOnPile)}\r\n            <div className={ player == 'Player 1'? 'player2Deck' :'player1Deck'} style={{pointerEvents: 'none'}}>\r\n                <p className='playerDeckText'>{player == 'Player 1' ? 'Player 2' : 'Player 1'}</p>\r\n                { player == 'Player 1' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                {turn===expectedTurnForSpinner && <Spinner />}\r\n            </div>\r\n            <br />\r\n            <div className='middleInfo' style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <button className='button-baralho' disabled={turn !== player} onClick={onCardDrawnHandler}> \r\n                <div class='red-circle'> \r\n                DRAW CARD\r\n                </div>\r\n                </button>\r\n                {playedCardsPile && playedCardsPile.length>0 &&\r\n                <img\r\n                    className='Card'\r\n                    src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                    /> }\r\n                {turn == 'Player 1' &&\r\n                    <button className='button-uno' disabled={player1Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n\r\n                {turn == 'Player 2' &&\r\n                    <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className={player=='Player 1' ? 'player1Deck' : 'player2Deck'} style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <p className='playerDeckText'>{ player }</p>\r\n                { player == 'Player 1' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chatBoxWrapper\">\r\n                <div className={player == 'Player 1' ? \"chat-box chat-box-player1\" : \"chat-box chat-box-player2\"}>\r\n                    <div className=\"chat-head\">\r\n                        <h2>Chat Box</h2>\r\n                        {!isChatBoxHidden ?\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                    </div>\r\n                    <div className=\"chat-body\">\r\n                        <div className=\"msg-insert\">\r\n                            {messages.map(msg => {\r\n                                if(msg.user === 'Player 2')\r\n                                    return <div className=\"msg-receive\">{msg.text}</div>\r\n                                if(msg.user === 'Player 1')\r\n                                    return <div className=\"msg-send\">{msg.text}</div>\r\n                            })}\r\n                        </div>\r\n                        <div className=\"chat-text\">\r\n                            <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n      </div>\r\n  )}\r\n\r\nexport default VisaoPlayer","C:\\Users\\marja\\projeto\\client-devuno\\src\\customHooks\\useWhileCard.js",["125"],"import React,{useEffect,useState} from 'react'\r\n\r\n\r\nconst useWhileCard = () => {\r\n    const [state,setState] = useState('')\r\n    console.log('Entrando em useWhileCard')\r\n    useEffect(() =>{\r\n        console.log('Atualizando dentro useEffect')\r\n            setState((newState) => {\r\n                const cardName = newState.cardName ? newState.cardName : '';\r\n                const lastNumber = typeof newState.lastNumber == 'number' ? newState : ''\r\n\r\n                if(lastNumber){        \r\n                    return {\r\n                        cardName: cardName,\r\n                        lastNumber: lastNumber,\r\n                    }\r\n                }\r\n            })\r\n    },[])\r\n\r\n    \r\n    return [state,setState]\r\n}\r\n\r\nexport default useWhileCard",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":15},{"ruleId":"130","severity":1,"message":"134","line":19,"column":8,"nodeType":"132","messageId":"133","endLine":19,"endColumn":20},{"ruleId":"130","severity":1,"message":"135","line":20,"column":10,"nodeType":"132","messageId":"133","endLine":20,"endColumn":17},{"ruleId":"130","severity":1,"message":"136","line":41,"column":18,"nodeType":"132","messageId":"133","endLine":41,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":68,"column":8,"nodeType":"139","endLine":68,"endColumn":10,"suggestions":"140"},{"ruleId":"130","severity":1,"message":"141","line":83,"column":12,"nodeType":"132","messageId":"133","endLine":83,"endColumn":27},{"ruleId":"130","severity":1,"message":"142","line":83,"column":29,"nodeType":"132","messageId":"133","endLine":83,"endColumn":45},{"ruleId":"130","severity":1,"message":"143","line":84,"column":12,"nodeType":"132","messageId":"133","endLine":84,"endColumn":30},{"ruleId":"130","severity":1,"message":"144","line":89,"column":12,"nodeType":"132","messageId":"133","endLine":89,"endColumn":24},{"ruleId":"137","severity":1,"message":"145","line":210,"column":8,"nodeType":"139","endLine":210,"endColumn":10,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":289,"column":39,"nodeType":"149","messageId":"150","endLine":289,"endColumn":41},{"ruleId":"147","severity":1,"message":"148","line":290,"column":104,"nodeType":"149","messageId":"150","endLine":290,"endColumn":106},{"ruleId":"147","severity":1,"message":"151","line":305,"column":39,"nodeType":"149","messageId":"150","endLine":305,"endColumn":41},{"ruleId":"147","severity":1,"message":"151","line":306,"column":102,"nodeType":"149","messageId":"150","endLine":306,"endColumn":104},{"ruleId":"147","severity":1,"message":"148","line":406,"column":40,"nodeType":"149","messageId":"150","endLine":406,"endColumn":42},{"ruleId":"147","severity":1,"message":"148","line":501,"column":39,"nodeType":"149","messageId":"150","endLine":501,"endColumn":41},{"ruleId":"147","severity":1,"message":"148","line":502,"column":105,"nodeType":"149","messageId":"150","endLine":502,"endColumn":107},{"ruleId":"147","severity":1,"message":"151","line":518,"column":39,"nodeType":"149","messageId":"150","endLine":518,"endColumn":41},{"ruleId":"147","severity":1,"message":"151","line":519,"column":102,"nodeType":"149","messageId":"150","endLine":519,"endColumn":104},{"ruleId":"147","severity":1,"message":"148","line":621,"column":40,"nodeType":"149","messageId":"150","endLine":621,"endColumn":42},{"ruleId":"152","severity":1,"message":"153","line":661,"column":21,"nodeType":"154","endLine":661,"endColumn":46},{"ruleId":"155","severity":1,"message":"156","line":2,"column":1,"nodeType":"157","endLine":11,"endColumn":2},{"ruleId":"130","severity":1,"message":"158","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"134","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":40,"column":9,"nodeType":"161","messageId":"162","endLine":378,"endColumn":10},{"ruleId":"147","severity":1,"message":"148","line":48,"column":34,"nodeType":"149","messageId":"150","endLine":48,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":49,"column":37,"nodeType":"149","messageId":"150","endLine":49,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":148,"column":34,"nodeType":"149","messageId":"150","endLine":148,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":149,"column":37,"nodeType":"149","messageId":"150","endLine":149,"endColumn":39},{"ruleId":"130","severity":1,"message":"163","line":181,"column":31,"nodeType":"132","messageId":"133","endLine":181,"endColumn":42},{"ruleId":"130","severity":1,"message":"163","line":205,"column":31,"nodeType":"132","messageId":"133","endLine":205,"endColumn":42},{"ruleId":"130","severity":1,"message":"163","line":224,"column":31,"nodeType":"132","messageId":"133","endLine":224,"endColumn":42},{"ruleId":"147","severity":1,"message":"148","line":251,"column":34,"nodeType":"149","messageId":"150","endLine":251,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":252,"column":37,"nodeType":"149","messageId":"150","endLine":252,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":294,"column":34,"nodeType":"149","messageId":"150","endLine":294,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":295,"column":37,"nodeType":"149","messageId":"150","endLine":295,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":318,"column":34,"nodeType":"149","messageId":"150","endLine":318,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":319,"column":37,"nodeType":"149","messageId":"150","endLine":319,"endColumn":39},{"ruleId":"164","severity":1,"message":"165","line":359,"column":25,"nodeType":"166","messageId":"167","endLine":376,"endColumn":14},{"ruleId":"147","severity":1,"message":"148","line":361,"column":34,"nodeType":"149","messageId":"150","endLine":361,"endColumn":36},{"ruleId":"147","severity":1,"message":"148","line":362,"column":37,"nodeType":"149","messageId":"150","endLine":362,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":382,"column":33,"nodeType":"149","messageId":"150","endLine":382,"endColumn":35},{"ruleId":"147","severity":1,"message":"148","line":384,"column":35,"nodeType":"149","messageId":"150","endLine":384,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":386,"column":37,"nodeType":"149","messageId":"150","endLine":386,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":410,"column":35,"nodeType":"149","messageId":"150","endLine":410,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":411,"column":37,"nodeType":"149","messageId":"150","endLine":411,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":441,"column":35,"nodeType":"149","messageId":"150","endLine":441,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":459,"column":35,"nodeType":"149","messageId":"150","endLine":459,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":474,"column":35,"nodeType":"149","messageId":"150","endLine":474,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":475,"column":50,"nodeType":"149","messageId":"150","endLine":475,"endColumn":52},{"ruleId":"147","severity":1,"message":"148","line":500,"column":35,"nodeType":"149","messageId":"150","endLine":500,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":501,"column":31,"nodeType":"149","messageId":"150","endLine":501,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":515,"column":71,"nodeType":"149","messageId":"150","endLine":515,"endColumn":73},{"ruleId":"147","severity":1,"message":"148","line":534,"column":35,"nodeType":"149","messageId":"150","endLine":534,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":535,"column":31,"nodeType":"149","messageId":"150","endLine":535,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":536,"column":64,"nodeType":"149","messageId":"150","endLine":536,"endColumn":66},{"ruleId":"147","severity":1,"message":"148","line":551,"column":60,"nodeType":"149","messageId":"150","endLine":551,"endColumn":62},{"ruleId":"147","severity":1,"message":"148","line":569,"column":35,"nodeType":"149","messageId":"150","endLine":569,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":618,"column":18,"nodeType":"149","messageId":"150","endLine":618,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":704,"column":43,"nodeType":"149","messageId":"150","endLine":704,"endColumn":45},{"ruleId":"147","severity":1,"message":"148","line":710,"column":37,"nodeType":"149","messageId":"150","endLine":710,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":711,"column":55,"nodeType":"149","messageId":"150","endLine":711,"endColumn":57},{"ruleId":"147","severity":1,"message":"148","line":712,"column":26,"nodeType":"149","messageId":"150","endLine":712,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":713,"column":21,"nodeType":"154","endLine":718,"endColumn":27},{"ruleId":"147","severity":1,"message":"148","line":720,"column":26,"nodeType":"149","messageId":"150","endLine":720,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":721,"column":21,"nodeType":"154","endLine":726,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":738,"column":17,"nodeType":"154","endLine":741,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":742,"column":23,"nodeType":"149","messageId":"150","endLine":742,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":749,"column":23,"nodeType":"149","messageId":"150","endLine":749,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":757,"column":35,"nodeType":"149","messageId":"150","endLine":757,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":759,"column":26,"nodeType":"149","messageId":"150","endLine":759,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":760,"column":21,"nodeType":"154","endLine":765,"endColumn":27},{"ruleId":"147","severity":1,"message":"148","line":767,"column":26,"nodeType":"149","messageId":"150","endLine":767,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":768,"column":21,"nodeType":"154","endLine":773,"endColumn":27},{"ruleId":"147","severity":1,"message":"148","line":778,"column":40,"nodeType":"149","messageId":"150","endLine":778,"endColumn":42},{"ruleId":"168","severity":1,"message":"169","line":787,"column":47,"nodeType":"170","messageId":"171","endLine":787,"endColumn":49},{"ruleId":"130","severity":1,"message":"172","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'useWhileCard' is defined but never used.","'waitFor' is defined but never used.","'setRoom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.","ArrayExpression",["175"],"'isChatBoxHidden' is assigned a value but never used.","'setChatBoxHidden' is assigned a value but never used.","'isUnoButtonPressed' is assigned a value but never used.","'playUnoSound' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'playGameOverSound'. Either include it or remove the dependency array.",["176"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'removeIndex' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [room]",{"range":"181","text":"182"},"Update the dependencies array to be: [playGameOverSound]",{"range":"183","text":"184"},[2447,2449],"[room]",[9174,9176],"[playGameOverSound]"]