{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marja\\\\projeto\\\\client-devuno\\\\src\\\\components\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PACK_OF_CARDS from '../utils/packOfCards';\nimport shuffleArray from '../utils/shuffleArray';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport Spinner from './Spinner';\nimport VisaoPlayer from '../pageComponents/visaoPlayer';\nimport useSound from 'use-sound';\nimport devunoWhite from '../assets/devuno/devuno_logo_white.png';\nimport bgMusic from '../assets/sounds/game-bg-music.mp3';\nimport unoSound from '../assets/sounds/uno-sound.mp3';\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3';\nimport skipCardSound from '../assets/sounds/skip-sound.mp3';\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3';\nimport wildCardSound from '../assets/sounds/wild-sound.mp3';\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3';\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3';\nimport useWhileCard from '../customHooks/useWhileCard';\nimport { waitFor } from '@testing-library/react'; //NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n//WHILECARD - 100\n//BREAK - 101\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket; // const ENDPOINT = 'http://localhost:5000'\n\nconst ENDPOINT = 'http://localhost:5000';\n\nconst Game = props => {\n  _s();\n\n  const [lastNumber, setLastNumber] = useState('');\n  const [isWhileCardOnPile, setIsWhileCardOnPile] = useState('');\n  const data = queryString.parse(props.location.search); //initialize socket state\n\n  const [room, setRoom] = useState(data.roomCode);\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connectionOptions = {\n      \"forceNew\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      room: room\n    }, error => {\n      if (error) setRoomFull(true);\n    }); //cleanup on component unmount\n\n    return function cleanup() {\n      socket.emit('disconnect'); //shut down connnection instance\n\n      socket.off();\n    };\n  }, []); //initialize game state\n\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState('');\n  const [turn, setTurn] = useState('');\n  const [player1Deck, setPlayer1Deck] = useState([]);\n  const [player2Deck, setPlayer2Deck] = useState([]);\n  const [currentColor, setCurrentColor] = useState('');\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [playedCardsPile, setPlayedCardsPile] = useState([]);\n  const [drawCardPile, setDrawCardPile] = useState([]);\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n  const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n  const [isSoundMuted, setSoundMuted] = useState(false);\n  const [isMusicMuted, setMusicMuted] = useState(true);\n  const [playBBgMusic, {\n    pause\n  }] = useSound(bgMusic, {\n    loop: true\n  });\n  const [playUnoSound] = useSound(unoSound);\n  const [playShufflingSound] = useSound(shufflingSound);\n  const [playSkipCardSound] = useSound(skipCardSound);\n  const [playDraw2CardSound] = useSound(draw2CardSound);\n  const [playWildCardSound] = useSound(wildCardSound);\n  const [playDraw4CardSound] = useSound(draw4CardSound);\n  const [playGameOverSound] = useSound(gameOverSound); //runs once on component mount\n\n  useEffect(() => {\n    //shuffle PACK_OF_CARDS array\n    const shuffledCards = shuffleArray(PACK_OF_CARDS); //extract first 7 elements to player1Deck\n\n    const player1Deck = shuffledCards.splice(0, 7); //extract first 7 elements to player2Deck\n\n    const player2Deck = shuffledCards.splice(0, 7); //extract random card from shuffledCards and check if its not an action card\n\n    let startingCardIndex;\n\n    while (true) {\n      startingCardIndex = Math.floor(Math.random() * 94);\n\n      if (shuffledCards[startingCardIndex] === 'skipR' || shuffledCards[startingCardIndex] === '_R' || shuffledCards[startingCardIndex] === 'D2R' || shuffledCards[startingCardIndex] === 'skipG' || shuffledCards[startingCardIndex] === '_G' || shuffledCards[startingCardIndex] === 'D2G' || shuffledCards[startingCardIndex] === 'skipB' || shuffledCards[startingCardIndex] === '_B' || shuffledCards[startingCardIndex] === 'D2B' || shuffledCards[startingCardIndex] === 'skipY' || shuffledCards[startingCardIndex] === '_Y' || shuffledCards[startingCardIndex] === 'D2Y' || shuffledCards[startingCardIndex] === 'W' || shuffledCards[startingCardIndex] === 'D4W' || shuffledCards[startingCardIndex] === 'WHILE_R' || shuffledCards[startingCardIndex] === 'WHILE_G' || shuffledCards[startingCardIndex] === 'WHILE_B' || shuffledCards[startingCardIndex] === 'WHILE_Y' || shuffledCards[startingCardIndex] === 'BREAK_R' || shuffledCards[startingCardIndex] === 'BREAK_G' || shuffledCards[startingCardIndex] === 'BREAK_B' || shuffledCards[startingCardIndex] === 'BREAK_Y') {\n        continue;\n      } else break;\n    } //extract the card from that startingCardIndex into the playedCardsPile\n\n\n    const playedCardsPile = shuffledCards.splice(startingCardIndex, 1); //store all remaining cards into drawCardPile\n\n    const drawCardPile = shuffledCards; //send initial state to server\n\n    socket.emit('initGameState', {\n      gameOver: false,\n      turn: 'Player 1',\n      player1Deck: [...player1Deck],\n      player2Deck: [...player2Deck],\n      currentColor: playedCardsPile[0].charAt(1),\n      currentNumber: playedCardsPile[0].charAt(0),\n      playedCardsPile: [...playedCardsPile],\n      drawCardPile: [...drawCardPile],\n      lastNumber: playedCardsPile[0].charAt(0),\n      isWhileCardOnPile: false\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('initGameState', ({\n      gameOver,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile,\n      lastNumber,\n      isWhileCardOnPile\n    }) => {\n      setGameOver(gameOver);\n      setTurn(turn);\n      setPlayer1Deck(player1Deck);\n      setPlayer2Deck(player2Deck);\n      setCurrentColor(currentColor);\n      setCurrentNumber(currentNumber);\n      setPlayedCardsPile(playedCardsPile);\n      setDrawCardPile(drawCardPile);\n      setLastNumber(lastNumber);\n      setIsWhileCardOnPile(isWhileCardOnPile);\n      /*           setWhileCardConf(whileCardConf)\r\n                \r\n                console.log(\"Current number conf init: \",currentNumber)\r\n                console.log(\"While card conf init: \",whileCardConf) */\n    });\n    socket.on('updateGameState', ({\n      gameOver,\n      winner,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile,\n      lastNumber,\n      isWhileCardOnPile = false\n    }) => {\n      console.log(\"drawnCardPile: \", drawCardPile);\n      const booleanWhieldCard = isWhileCardOnPile !== undefined ? isWhileCardOnPile : false; //            const verifiedLastNumber = lastNumber !== undefined ? lastNumber : \n\n      gameOver && setGameOver(gameOver);\n      gameOver === true && playGameOverSound();\n      winner && setWinner(winner);\n      turn && setTurn(turn);\n      player1Deck && setPlayer1Deck(player1Deck);\n      player2Deck && setPlayer2Deck(player2Deck);\n      currentColor && setCurrentColor(currentColor);\n      currentNumber && setCurrentNumber(currentNumber);\n      playedCardsPile && setPlayedCardsPile(playedCardsPile);\n      drawCardPile && setDrawCardPile(drawCardPile); // whileCardConf && setWhileCardConf(whileCardConf)\n\n      lastNumber && setLastNumber(lastNumber);\n      setIsWhileCardOnPile(booleanWhieldCard); //console.log(\"While card conf update: \",whileCardConf)\n\n      console.log(\"Current number update: \", currentNumber);\n      console.log(\"Last number conf update: \", lastNumber);\n      console.log('isWhileCardOnPile update: ', isWhileCardOnPile);\n      setUnoButtonPressed(false);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on('currentUserData', ({\n      name\n    }) => {\n      setCurrentUser(name);\n    });\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n      const chatBody = document.querySelector('.chat-body');\n      chatBody.scrollTop = chatBody.scrollHeight;\n    });\n  }, []);\n\n  const onCardDrawnHandler = () => {\n    //extract player who drew the card\n    const cardDrawnBy = turn;\n    console.log('Turn on top: ', turn);\n    console.log('isWhileCardOnPile on top :', isWhileCardOnPile); //check who drew the card and return new state accordingly\n\n    if (cardDrawnBy === 'Player 1') {\n      //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile]; //pull out last element from it\n\n      const drawCard = copiedDrawCardPileArray.pop(); //extract number and color of drawn card\n\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0); //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \n\n      console.log('JOGADOR 1: ');\n      console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y');\n      console.log(\"isWhileCardOnPile\");\n      console.log(\"isWhileCardOnPile\", isWhileCardOnPile);\n      console.log(\"currentColor\", currentColor);\n      console.log(\"colorOfDrawnCard\", colorOfDrawnCard);\n\n      if (colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\n        console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'));\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 101,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } else if (colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 101,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } else if (colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentNumber: 102,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: true\n        });\n      } else if (colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentNumber: 102,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } else if (numberOfDrawnCard == lastNumber && isWhileCardOnPile) {\n        console.log('numberOfDrawnCard == lastNumber && isWhileCardOnPile: ', numberOfDrawnCard == lastNumber && isWhileCardOnPile);\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: numberOfDrawnCard,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\n      //entao compra e mantem o turno\n      else if (numberOfDrawnCard != lastNumber && isWhileCardOnPile) {\n          console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile', numberOfDrawnCard != lastNumber && isWhileCardOnPile);\n          alert(`You drew ${drawCard}.`);\n          !isSoundMuted && playShufflingSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: true\n          });\n        } else if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n          console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \", colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'));\n          alert(`You drew ${drawCard}. It was played for you.`);\n          !isSoundMuted && playShufflingSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: 404,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: false\n          });\n        } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n          console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \", colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'));\n          alert(`You drew ${drawCard}. It was played for you.`); //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n          //make a copy of drawCardPile array\n\n          const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: 252,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: false\n          });\n        } else if (drawCard === 'W') {\n          console.log(\"drawCard === 'W': \", drawCard === 'W');\n          alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n          const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n          !isSoundMuted && playWildCardSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            turn: 'Player 2',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: newColor,\n            currentNumber: 300,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: false\n          });\n        } else if (drawCard === 'D4W') {\n          console.log(\"drawCard === 'W' :\", drawCard === 'W');\n          alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n          const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n          //make a copy of drawCardPile array\n\n          const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          const drawCard3 = copiedDrawCardPileArray.pop();\n          const drawCard4 = copiedDrawCardPileArray.pop();\n          !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n            currentColor: newColor,\n            currentNumber: 600,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: false\n          });\n        } else if (colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y')) {\n          console.log(\"(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') :\", colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y'));\n          alert(`You drew ${drawCard}. It was played for you.`);\n          !isSoundMuted && playShufflingSound();\n          console.log('isWhileCardOnPile: ', drawCard.includes('WHILE'));\n          socket.emit('updateGameState', {\n            turn: 'Player 2',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: numberOfDrawnCard,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: true\n          });\n          console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile);\n        } //if not action card - check if drawn card is playable\n        else if (numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) {\n            console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) :\", numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor);\n            alert(`You drew ${drawCard}. It was played for you.`);\n            !isSoundMuted && playShufflingSound();\n            console.log('isWhileCardOnPile: ', drawCard.includes('WHILE'));\n            socket.emit('updateGameState', {\n              turn: 'Player 2',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              currentColor: colorOfDrawnCard,\n              currentNumber: numberOfDrawnCard,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: false\n            });\n            console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile);\n          } //else add the drawn card to player1's deck\n          else {\n              console.log('just add the drawn card to player1 deck');\n              !isSoundMuted && playShufflingSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                turn: 'Player 2',\n                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n                drawCardPile: [...copiedDrawCardPileArray],\n                isWhileCardOnPile: false\n              });\n            }\n    } else {\n      //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile]; //pull out last element from it\n\n      const drawCard = copiedDrawCardPileArray.pop(); //extract number and color of drawn card\n\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0);\n      console.log('JOGADOR 2: ');\n      console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y');\n      console.log(\"isWhileCardOnPile\");\n      console.log(\"isWhileCardOnPile\", isWhileCardOnPile);\n      console.log(\"currentColor\", currentColor);\n      console.log(\"colorOfDrawnCard\", colorOfDrawnCard);\n\n      if (colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\n        console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'));\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 101,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } else if (colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 101,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } else if (colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentNumber: 102,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: true\n        });\n      } else if (colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentNumber: 102,\n          drawCardPile: [...copiedDrawCardPileArray],\n          isWhileCardOnPile: false\n        });\n      } //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \n      else if (numberOfDrawnCard == lastNumber && isWhileCardOnPile) {\n          console.log('numberOfDrawnCard === lastNumber && isWhileCardOnPile: ', numberOfDrawnCard == lastNumber && isWhileCardOnPile);\n          alert(`You drew ${drawCard}. It was played for you.`);\n          !isSoundMuted && playShufflingSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            turn: 'Player 1',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: numberOfDrawnCard,\n            drawCardPile: [...copiedDrawCardPileArray],\n            isWhileCardOnPile: false\n          });\n        } //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\n        //entao compra e mantem o turno\n        else if (numberOfDrawnCard != lastNumber && isWhileCardOnPile) {\n            console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile', numberOfDrawnCard != lastNumber && isWhileCardOnPile);\n            alert(`You drew ${drawCard}.`);\n            !isSoundMuted && playShufflingSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: true\n            });\n          } else if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n            console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \", colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'));\n            alert(`You drew ${drawCard}. It was played for you.`);\n            !isSoundMuted && playShufflingSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              currentColor: colorOfDrawnCard,\n              currentNumber: 404,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: false\n            });\n          } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n            console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \", colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'));\n            alert(`You drew ${drawCard}. It was played for you.`); //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n            //make a copy of drawCardPile array\n\n            const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n              currentColor: colorOfDrawnCard,\n              currentNumber: 252,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: false\n            });\n          } else if (drawCard === 'W') {\n            console.log(\"drawCard === 'W': \", drawCard === 'W');\n            alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n            !isSoundMuted && playWildCardSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              turn: 'Player 1',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              currentColor: newColor,\n              currentNumber: 300,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: false\n            });\n          } else if (drawCard === 'D4W') {\n            console.log(\"drawCard === 'D4W'\", drawCard === 'D4W');\n            alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n            //make a copy of drawCardPile array\n\n            const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const drawCard3 = copiedDrawCardPileArray.pop();\n            const drawCard4 = copiedDrawCardPileArray.pop();\n            !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n              currentColor: newColor,\n              currentNumber: 600,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: false\n            });\n          } else if (colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y')) {\n            console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \", numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor);\n            alert(`You drew ${drawCard}. It was played for you.`);\n            !isSoundMuted && playShufflingSound();\n            console.log('isWhileCardOnPile: ', drawCard.includes('WHILE')); //send new state to server\n\n            socket.emit('updateGameState', {\n              turn: 'Player 1',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n              currentColor: colorOfDrawnCard,\n              currentNumber: numberOfDrawnCard,\n              drawCardPile: [...copiedDrawCardPileArray],\n              isWhileCardOnPile: true\n            });\n            console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile);\n          } //if not action card - check if drawn card is playable\n          else if (numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) {\n              console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \", numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor);\n              alert(`You drew ${drawCard}. It was played for you.`);\n              !isSoundMuted && playShufflingSound();\n              console.log('isWhileCardOnPile: ', drawCard.includes('WHILE')); //send new state to server\n\n              socket.emit('updateGameState', {\n                turn: 'Player 1',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                currentColor: colorOfDrawnCard,\n                currentNumber: numberOfDrawnCard,\n                drawCardPile: [...copiedDrawCardPileArray],\n                isWhileCardOnPile: drawCard.includes('WHILE')\n              });\n              console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile);\n            } //else add the drawn card to player2's deck\n            else {\n                console.log('just add the drawn card to player 2 deck');\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  turn: 'Player 1',\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n                  drawCardPile: [...copiedDrawCardPileArray],\n                  isWhileCardOnPile: false\n                });\n              }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Game backgroundColorR backgroundColor${currentColor}`,\n    children: [console.log(\"GameJS: \", isWhileCardOnPile), !roomFull ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: devunoWhite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Game Code: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => setSoundMuted(!isSoundMuted),\n            children: isSoundMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 124\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 177\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => {\n              if (isMusicMuted) playBBgMusic();else pause();\n              setMusicMuted(!isMusicMuted);\n            },\n            children: isMusicMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 44\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_note\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 96\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }, this), users.length === 1 && currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Player 1 has left the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 68\n      }, this), users.length === 1 && currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Waiting for Player 2 to join the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 68\n      }, this), users.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: winner !== '' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"GAME OVER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 58\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [winner, \" wins!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 76\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(VisaoPlayer, {\n              player: \"Player 1\",\n              turn: turn,\n              currentColor: currentColor,\n              player1Deck: player1Deck,\n              player2Deck: player2Deck,\n              drawCardPile: drawCardPile,\n              isSoundMuted: isSoundMuted,\n              playShufflingSound: playShufflingSound,\n              playedCardsPile: playedCardsPile,\n              currentNumber: currentNumber,\n              playSkipCardSound: playSkipCardSound,\n              playDraw2CardSound: playDraw2CardSound,\n              playWildCardSound: playWildCardSound,\n              playDraw4CardSound: playDraw4CardSound,\n              onCardDrawnHandler: onCardDrawnHandler,\n              socket: socket,\n              message: message,\n              messages: messages,\n              setMessage: setMessage,\n              setMessages: setMessages,\n              lastNumber: lastNumber,\n              isWhileCardOnPile: isWhileCardOnPile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 26\n            }, this)\n          }, void 0, false), currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(VisaoPlayer, {\n              player: \"Player 2\",\n              turn: turn,\n              currentColor: currentColor,\n              player1Deck: player1Deck,\n              player2Deck: player2Deck,\n              drawCardPile: drawCardPile,\n              isSoundMuted: isSoundMuted,\n              playShufflingSound: playShufflingSound,\n              playedCardsPile: playedCardsPile,\n              currentNumber: currentNumber,\n              playSkipCardSound: playSkipCardSound,\n              playDraw2CardSound: playDraw2CardSound,\n              playWildCardSound: playWildCardSound,\n              playDraw4CardSound: playDraw4CardSound,\n              onCardDrawnHandler: onCardDrawnHandler,\n              socket: socket,\n              message: message,\n              messages: messages,\n              setMessage: setMessage,\n              setMessages: setMessages,\n              lastNumber: lastNumber,\n              isWhileCardOnPile: isWhileCardOnPile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 35\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 21\n        }, this)\n      }, void 0, false)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Room full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button-quit\",\n        children: \"QUIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"xU9Nbtj3bGLCwvBUXYIbfftW0DE=\", false, function () {\n  return [useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/marja/projeto/client-devuno/src/components/Game.js"],"names":["React","useEffect","useState","PACK_OF_CARDS","shuffleArray","io","queryString","Spinner","VisaoPlayer","useSound","devunoWhite","bgMusic","unoSound","shufflingSound","skipCardSound","draw2CardSound","wildCardSound","draw4CardSound","gameOverSound","useWhileCard","waitFor","socket","ENDPOINT","Game","props","lastNumber","setLastNumber","isWhileCardOnPile","setIsWhileCardOnPile","data","parse","location","search","room","setRoom","roomCode","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","connectionOptions","connect","emit","error","cleanup","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","playBBgMusic","pause","loop","playUnoSound","playShufflingSound","playSkipCardSound","playDraw2CardSound","playWildCardSound","playDraw4CardSound","playGameOverSound","shuffledCards","splice","startingCardIndex","Math","floor","random","charAt","on","console","log","booleanWhieldCard","undefined","name","chatBody","document","querySelector","scrollTop","scrollHeight","onCardDrawnHandler","cardDrawnBy","copiedDrawCardPileArray","drawCard","pop","colorOfDrawnCard","length","numberOfDrawnCard","alert","slice","drawCard1","drawCard2","newColor","prompt","toUpperCase","drawCard3","drawCard4","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport VisaoPlayer from '../pageComponents/visaoPlayer'\r\nimport useSound from 'use-sound'\r\nimport devunoWhite from '../assets/devuno/devuno_logo_white.png'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\nimport { waitFor } from '@testing-library/react'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n//WHILECARD - 100\r\n//BREAK - 101\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'http://localhost:5000'\r\n\r\nconst Game = (props) => {\r\n    const [lastNumber, setLastNumber] = useState('')\r\n    const [isWhileCardOnPile, setIsWhileCardOnPile] = useState('')\r\n\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R'      || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG'    || shuffledCards[startingCardIndex]==='_G'      || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB'    || shuffledCards[startingCardIndex]==='_B'      || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY'    || shuffledCards[startingCardIndex]==='_Y'      || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W'        || shuffledCards[startingCardIndex]==='D4W'     ||\r\n            shuffledCards[startingCardIndex]==='WHILE_R'  || shuffledCards[startingCardIndex]==='WHILE_G' || \r\n            shuffledCards[startingCardIndex]==='WHILE_B'  || shuffledCards[startingCardIndex]==='WHILE_Y' ||\r\n            shuffledCards[startingCardIndex]==='BREAK_R'  || shuffledCards[startingCardIndex]==='BREAK_G' || \r\n            shuffledCards[startingCardIndex]==='BREAK_B'  || shuffledCards[startingCardIndex]==='BREAK_Y'\r\n            \r\n            ) {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile],\r\n            lastNumber: playedCardsPile[0].charAt(0),\r\n            isWhileCardOnPile: false\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile }) => {\r\n            \r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n            setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(isWhileCardOnPile)\r\n  /*           setWhileCardConf(whileCardConf)\r\n            \r\n            console.log(\"Current number conf init: \",currentNumber)\r\n            console.log(\"While card conf init: \",whileCardConf) */\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile, lastNumber, isWhileCardOnPile = false}) => {\r\n            console.log(\"drawnCardPile: \",drawCardPile)\r\n            const booleanWhieldCard = isWhileCardOnPile !== undefined ? isWhileCardOnPile : false\r\n//            const verifiedLastNumber = lastNumber !== undefined ? lastNumber : \r\n\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n           // whileCardConf && setWhileCardConf(whileCardConf)\r\n            \r\n            lastNumber && setLastNumber(lastNumber)\r\n            setIsWhileCardOnPile(booleanWhieldCard)\r\n            //console.log(\"While card conf update: \",whileCardConf)\r\n            console.log(\"Current number update: \",currentNumber)\r\n            console.log(\"Last number conf update: \",lastNumber)\r\n            console.log('isWhileCardOnPile update: ', isWhileCardOnPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n\r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        console.log('Turn on top: ', turn)\r\n        console.log('isWhileCardOnPile on top :',isWhileCardOnPile)\r\n        //check who drew the card and return new state accordingly\r\n        \r\n        if(cardDrawnBy === 'Player 1') {\r\n            \r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            console.log('JOGADOR 1: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n            \r\n            \r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard == lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'W' :\",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile:false\r\n                })\r\n            }\r\n            else if((colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') :\",(colorOfDrawnCard === currentColor) && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor) ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) :\",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) )\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ', isWhileCardOnPile)\r\n            }\r\n\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                console.log('just add the drawn card to player1 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            console.log('JOGADOR 2: ')\r\n            console.log(\"(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\",(drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n            console.log(\"isWhileCardOnPile\")\r\n            console.log(\"isWhileCardOnPile\",isWhileCardOnPile)\r\n            console.log(\"currentColor\",currentColor)\r\n            console.log(\"colorOfDrawnCard\", colorOfDrawnCard)\r\n\r\n            if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')\", colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'BREAK_R' || drawCard === 'BREAK_G' || drawCard === 'BREAK_B' || drawCard === 'BREAK_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 101,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && !isWhileCardOnPile && (drawCard === 'PASS_R' || drawCard === 'PASS_G' || drawCard === 'PASS_B' || drawCard === 'PASS_Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentNumber: 102,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            //se o número jogado é igual ao último número e há uma carta 'WHILE' na mesa \r\n            else if(numberOfDrawnCard == lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard === lastNumber && isWhileCardOnPile: ',numberOfDrawnCard == lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n               \r\n            }\r\n            //se o número jogado não é igual ao último número da mesa e há uma carta \"WHILE\"\r\n            //entao compra e mantem o turno\r\n            else if(numberOfDrawnCard != lastNumber && isWhileCardOnPile){\r\n                console.log('numberOfDrawnCard != lastNumber && isWhileCardOnPile',numberOfDrawnCard != lastNumber && isWhileCardOnPile)\r\n                alert(`You drew ${drawCard}.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n            }\r\n\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'): \",colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                console.log(\"colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'): \",colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y'))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                console.log(\"drawCard === 'W': \",drawCard === 'W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                console.log(\"drawCard === 'D4W'\",drawCard === 'D4W')\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'WHILE_R' || drawCard === 'WHILE_G' || drawCard === 'WHILE_B' || drawCard === 'WHILE_Y') ) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: true\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if((numberOfDrawnCard == currentNumber || colorOfDrawnCard === currentColor)) {\r\n                console.log(\"(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor): \",(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor))\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                console.log('isWhileCardOnPile: ',drawCard.includes('WHILE') )\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: drawCard.includes('WHILE')\r\n                })\r\n                console.log('Setou isWhileCardOnPile: ',isWhileCardOnPile)\r\n\r\n            }\r\n\r\n            \r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                console.log('just add the drawn card to player 2 deck')\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray],\r\n                    isWhileCardOnPile: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n                {console.log(\"GameJS: \",isWhileCardOnPile)}\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={devunoWhite} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button green' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>  \r\n\r\n                       { <VisaoPlayer  player='Player 1'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n\r\n                        />}\r\n                        </>\r\n                        }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n\r\n                                  <VisaoPlayer  player='Player 2'\r\n                                        turn={turn }\r\n                                        currentColor={currentColor}\r\n                                        player1Deck={player1Deck}\r\n                                        player2Deck={player2Deck}\r\n                                        drawCardPile={drawCardPile}\r\n                                        isSoundMuted={isSoundMuted}\r\n                                        playShufflingSound={playShufflingSound}\r\n                                        playedCardsPile={playedCardsPile}\r\n                                        currentNumber={currentNumber}\r\n                                        playSkipCardSound={playSkipCardSound}\r\n                                        playDraw2CardSound={playDraw2CardSound}\r\n                                        playWildCardSound={playWildCardSound}\r\n                                        playDraw4CardSound={playDraw4CardSound}\r\n                                        onCardDrawnHandler={onCardDrawnHandler}\r\n                                        socket={socket}\r\n                                        message={message}\r\n                                        messages={messages}\r\n                                        setMessage={setMessage}\r\n                                        setMessages={setMessages}\r\n                                        lastNumber={lastNumber}\r\n                                        isWhileCardOnPile={isWhileCardOnPile}\r\n                                />\r\n                        </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button-quit\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}