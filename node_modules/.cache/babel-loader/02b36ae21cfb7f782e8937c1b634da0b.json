{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marja\\\\projeto\\\\client-devuno\\\\src\\\\pageComponents\\\\visaoPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useSound from 'use-sound';\nimport unoSound from '../assets/sounds/uno-sound.mp3';\nimport Spinner from '../components/Spinner';\nimport useWhileCard from '../customHooks/useWhileCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VisaoPlayer = ({\n  player,\n  turn,\n  currentColor,\n  player1Deck,\n  player2Deck,\n  drawCardPile,\n  isSoundMuted,\n  playShufflingSound,\n  playedCardsPile,\n  currentNumber,\n  playSkipCardSound,\n  playDraw2CardSound,\n  playWildCardSound,\n  playDraw4CardSound,\n  onCardDrawnHandler,\n  socket,\n  //transferir para o componente\n  message,\n  messages,\n  setMessage,\n  setMessages,\n  lastNumber,\n  isWhileCardOnPile\n}) => {\n  _s();\n\n  const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n  const [playUnoSound] = useSound(unoSound);\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n\n  const onCardPlayedHandler = played_card => {\n    //extract player who played the card\n    const cardPlayedBy = turn;\n    console.log('Turno de quem jogou a carta: ', turn);\n    console.log('Jogou a carta \"isWhileCardOnPile\": ', isWhileCardOnPile);\n\n    switch (played_card) {\n      //if card played was a number card\n      case '0R':\n      case '1R':\n      case '2R':\n      case '3R':\n      case '4R':\n      case '5R':\n      case '6R':\n      case '7R':\n      case '8R':\n      case '9R':\n      case '_R':\n      case '0G':\n      case '1G':\n      case '2G':\n      case '3G':\n      case '4G':\n      case '5G':\n      case '6G':\n      case '7G':\n      case '8G':\n      case '9G':\n      case '_G':\n      case '0B':\n      case '1B':\n      case '2B':\n      case '3B':\n      case '4B':\n      case '5B':\n      case '6B':\n      case '7B':\n      case '8B':\n      case '9B':\n      case '_B':\n      case '0Y':\n      case '1Y':\n      case '2Y':\n      case '3Y':\n      case '4Y':\n      case '5Y':\n      case '6Y':\n      case '7Y':\n      case '8Y':\n      case '9Y':\n      case '_Y':\n        {\n          //extract number and color of played card\n          const numberOfPlayedCard = played_card.charAt(0);\n          const colorOfPlayedCard = played_card.charAt(1);\n          console.log('Current Number: ', currentNumber);\n          console.log('Current Color: ', currentNumber);\n\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, numberOfPlayedCard);\n            } else {\n              whileCardLoop('Player 2', played_card, numberOfPlayedCard);\n            }\n          } else if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                forgotUno('Player 1', 'Player 2', played_card, colorOfPlayedCard, numberOfPlayedCard);\n              } else {\n                !isSoundMuted && playShufflingSound();\n                const removeIndex = player1Deck.indexOf(played_card);\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                socketEmitUpdateGameState('Player 1', 'Player 2', played_card, updatedPlayer1Deck, colorOfPlayedCard, numberOfPlayedCard);\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                forgotUno(\"player2\", \"Player 1\", played_card, colorOfPlayedCard, numberOfPlayedCard);\n              } else {\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                const removeIndex = player2Deck.indexOf(played_card);\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                socketEmitUpdateGameState('Player 2', 'Player 1', played_card, updatedPlayer2Deck, colorOfPlayedCard, numberOfPlayedCard);\n              }\n            }\n          } //check for number match\n          else if (currentNumber === numberOfPlayedCard) {\n              console.log('numbers matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                //then update turn, currentColor and currentNumber\n                const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                  forgotUno(\"Player 1\", \"Player 2\", played_card, colorOfPlayedCard, numberOfPlayedCard);\n                } else {\n                  !isSoundMuted && playShufflingSound();\n                  const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                  socketEmitUpdateGameState(\"Player 1\", \"Player 2\", played_card, updatedPlayer1Deck, colorOfPlayedCard, numberOfPlayedCard);\n                }\n              } else {\n                //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                //then update turn, currentColor and currentNumber\n                const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                  forgotUno(\"Player 2\", \"Player 1\", played_card, colorOfPlayedCard, numberOfPlayedCard);\n                } else {\n                  !isSoundMuted && playShufflingSound();\n                  const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                  socketEmitUpdateGameState(\"Player 2\", \"Player 1\", played_card, updatedPlayer2Deck, colorOfPlayedCard, numberOfPlayedCard);\n                }\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a skip card\n\n      case 'skipR':\n      case 'skipG':\n      case 'skipB':\n      case 'skipY':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(4); //check for color match\n\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, 404);\n            } else {\n              whileCardLoop('Player 2', played_card, 404);\n            }\n          } else if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                forgotUno(\"Player 1\", \"Player 1\", played_card, colorOfPlayedCard, 404);\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                socketEmitUpdateGameState(\"Player 1\", \"Player 1\", played_card, updatedPlayer1Deck, colorOfPlayedCard, 404);\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                forgotUno('Player 2', 'Player 2', played_card, colorOfPlayedCard, 404);\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                const removeIndex = player2Deck.indexOf(played_card);\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                socketEmitUpdateGameState('Player 2', 'Player 2', played_card, updatedPlayer2Deck, colorOfPlayedCard, 404);\n              }\n            }\n          } //check for number match - if skip card played on skip card\n          else if (currentNumber === 404) {\n              console.log('Numbers matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                  forgotUno('Player 1', 'Player 1', played_card, colorOfPlayedCard, 404);\n                } else {\n                  !isSoundMuted && playSkipCardSound();\n                  const removeIndex = player1Deck.indexOf(played_card);\n                  const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                  socketEmitUpdateGameState('Player 1', 'Player 1', played_card, updatedPlayer1Deck, colorOfPlayedCard, 404);\n                }\n              } else {\n                //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                  forgotUno('Player 2', 'Player 2', played_card, colorOfPlayedCard, 404);\n                } else {\n                  !isSoundMuted && playSkipCardSound();\n                  const removeIndex = player2Deck.indexOf(played_card);\n                  const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                  socketEmitUpdateGameState('Player 2', 'Player 2', played_card, updatedPlayer2Deck, colorOfPlayedCard, 404);\n                }\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a draw 2 card\n\n      case 'D2R':\n      case 'D2G':\n      case 'D2B':\n      case 'D2Y':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(2); //check for color match\n\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, 252);\n            } else {\n              whileCardLoop('Player 2', played_card, 252);\n            }\n          } else if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              const forgotPressUno = player1Deck.length === 2 && !isUnoButtonPressed;\n              drag2(\"Player 1\", played_card, colorOfPlayedCard, \"Player 2\", forgotPressUno);\n            } else {\n              const forgotPressUno = player2Deck.length === 2 && !isUnoButtonPressed;\n              drag2(\"Player 2\", played_card, colorOfPlayedCard, \"Player 1\", forgotPressUno);\n            }\n          } //check for number match - if draw 2 card played on draw 2 card\n          else if (currentNumber === 252) {\n              console.log('number matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                const forgotPressUno = player1Deck.length === 2 && !isUnoButtonPressed;\n                drag2(\"Player 1\", played_card, colorOfPlayedCard, \"Player 2\", forgotPressUno);\n              } else {\n                const forgotPressUno = player2Deck.length === 2 && !isUnoButtonPressed;\n                drag2(\"Player 2\", played_card, colorOfPlayedCard, \"Player 1\", forgotPressUno);\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a wild card\n\n      case 'W':\n        {\n          //check who played the card and return new state accordingly\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, 300);\n            } else {\n              whileCardLoop('Player 2', played_card, 300);\n            }\n          } else {\n            if (cardPlayedBy === 'Player 1') {\n              wildCard('Player 1', 'Player 2', played_card, player1Deck.length === 2 && !isUnoButtonPressed);\n            } else {\n              wildCard('Player 2', 'Player 1', played_card, player2Deck.length === 2 && !isUnoButtonPressed);\n            }\n          }\n\n          break;\n        }\n\n      case 'WHILE_R':\n      case 'WHILE_G':\n      case 'WHILE_B':\n      case 'WHILE_Y':\n        {\n          const colorOfPlayedCard = played_card.charAt(played_card.length - 1);\n\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, 100);\n            } else {\n              whileCardLoop('Player 2', played_card, 100);\n            }\n          } else if (currentColor === colorOfPlayedCard) {\n            if (cardPlayedBy === 'Player 1') {\n              whileCard('Player 1', 'Player 2', played_card, colorOfPlayedCard, player1Deck.length === 2 && !isUnoButtonPressed);\n            } else {\n              whileCard(\"Player 2\", 'Player 1', played_card, colorOfPlayedCard, player1Deck.length === 2 && !isUnoButtonPressed);\n            }\n          } else {\n            alert('Invalid Move!');\n          }\n\n          break;\n        }\n\n      case 'BREAK_R':\n      case 'BREAK_G':\n      case 'BREAK_B':\n      case 'BREAK_Y':\n        {\n          if (cardPlayedBy === 'Player 1') {\n            breakCard('Player 1', turn, played_card);\n          } else {\n            console.log('WhileCard: ', isWhileCardOnPile);\n            breakCard('Player 2', turn, played_card);\n          }\n\n          break;\n        }\n\n      case 'PASS_R':\n      case 'PASS_G':\n      case 'PASS_B':\n      case 'PASS_Y':\n        {\n          if (cardPlayedBy === 'Player 1') {\n            pass('Player 1', turn, played_card);\n          } else {\n            console.log('WhileCard: ', isWhileCardOnPile);\n            pass('Player 2', turn, played_card);\n          }\n\n          break;\n        }\n      //if card played was a draw four wild card\n\n      case 'D4W':\n        {\n          //check who played the card and return new state accordingly\n          if (currentNumber == 100) {\n            if (cardPlayedBy == 'Player 1') {\n              whileCardLoop('Player 1', played_card, 600);\n            } else {\n              whileCardLoop('Player 2', played_card, 600);\n            }\n          } else if (cardPlayedBy === 'Player 1') {\n            drag4('Player 1', played_card, 'Player 2', player1Deck.length === 2 && !isUnoButtonPressed);\n          } else {\n            drag4('Player 2', played_card, 'Player 1', player1Deck.length === 2 && !isUnoButtonPressed);\n          }\n        }\n        break;\n    }\n  };\n\n  const drag2 = (player, played_card, colorOfPlayedCard, opponent, isForgotUno = false) => {\n    const nextTurn = player == 'Player 1' ? 'Player 2' : 'Player 1';\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck;\n    const modifiedDeck = [...drawCardPile];\n    const opponentDrawCard1 = modifiedDeck.pop();\n    const opponentDrawCard2 = modifiedDeck.pop();\n    opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2, ...opponentDeck.slice(opponentDeck.length)];\n\n    if (isForgotUno) {\n      forgotUno(player, nextTurn, played_card, colorOfPlayedCard, 252, opponentDeck, modifiedDeck);\n    } else {\n      const removeIndex = playerDeck.indexOf(played_card);\n      const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n      socketEmitUpdateGameState(player, nextTurn, played_card, updatedPlayerDeck, colorOfPlayedCard, 252, modifiedDeck, opponentDeck);\n    }\n  };\n\n  const drag4 = (player, played_card, opponent, isForgotUno = false) => {\n    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck;\n    const modifiedDeck = [...drawCardPile]; //VERIFICAR POSSIBILIDADE DE BUG SE HOUVER MENOS DE 4 CARTAS A SEREM TIRADAS\n\n    const opponentDrawCard1 = modifiedDeck.pop();\n    const opponentDrawCard2 = modifiedDeck.pop();\n    const opponentDrawCard3 = modifiedDeck.pop();\n    const opponentDrawCard4 = modifiedDeck.pop();\n    opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2, opponentDrawCard3, opponentDrawCard4, ...opponentDeck.slice(opponentDeck.length)];\n\n    if (isForgotUno) {\n      forgotUno(player, player, played_card, newColor, 600, opponentDeck, modifiedDeck);\n    } else {\n      const removeIndex = playerDeck.indexOf(played_card);\n      const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n      socketEmitUpdateGameState(player, player, played_card, updatedPlayerDeck, newColor, 600, modifiedDeck, opponentDeck);\n    }\n  };\n\n  const wildCard = (player, turn, played_card, isForgotUno = false) => {\n    let newColor = prompt('Enter first letter of new color (R/G/B/Y)');\n\n    if (newColor) {\n      newColor = newColor.toUpperCase();\n      const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n\n      if (isForgotUno) {\n        forgotUno(player, turn, played_card, newColor, 300);\n      } else {\n        const removeIndex = playerDeck.indexOf(played_card);\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n        !isSoundMuted && playWildCardSound();\n        socketEmitUpdateGameState(player, turn, played_card, updatedPlayerDeck, newColor, 300);\n      }\n    } else {\n      alert(\"Invalid Color!\");\n    }\n  };\n\n  const whileCard = (player, turn, played_card, colorOfPlayedCard, isForgotUno = false) => {\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n\n    if (isForgotUno) {\n      forgotUno(player, turn, played_card, colorOfPlayedCard, 100, null, null, true);\n    } else {\n      const removeIndex = playerDeck.indexOf(played_card);\n      const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n      socketEmitUpdateGameState(player, turn, played_card, updatedPlayerDeck, colorOfPlayedCard, 100, null, null, true);\n    }\n  };\n\n  const whileCardLoop = (player, played_card, numberOfPlayedCard) => {\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    const nextTurnIfSuccessfullPlay = player == 'Player 1' ? 'Player 2' : 'Player 1';\n    const colorOfPlayedCard = played_card.charAt(played_card.length - 1); //Verifica se o card jogado contém o mesmo número da última carta numérica presente\n    //na mesa\n\n    const removeIndex = playerDeck.indexOf(played_card);\n    const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n\n    if (lastNumber === numberOfPlayedCard) {\n      if (playerDeck.length === 2 && !isUnoButtonPressed) {\n        forgotUno(player, nextTurnIfSuccessfullPlay, played_card, colorOfPlayedCard, numberOfPlayedCard, null, null, false);\n      } else {\n        socketEmitUpdateGameState(player, nextTurnIfSuccessfullPlay, played_card, updatedPlayerDeck, colorOfPlayedCard, numberOfPlayedCard, null, null, false);\n      }\n    } else {\n      alert(\"Number \" + lastNumber + \" required!\"); //socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck)\n\n      console.log('updatedPlayerDeck: ', updatedPlayerDeck);\n    }\n  };\n\n  const breakCard = (player, turn, played_card) => {\n    const colorOfPlayedCard = played_card.charAt(played_card.length - 1);\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\n    console.log(currentNumber);\n\n    if (colorOfPlayedCard === currentColor && isWhileCardOnPile) {\n      if (playerDeck.length === 2 && !isUnoButtonPressed) {\n        forgotUno(player, nextTurn, played_card, colorOfPlayedCard, 101);\n      } else {\n        const removeIndex = playerDeck.indexOf(played_card);\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n        socketEmitUpdateGameState(player, nextTurn, played_card, updatedPlayerDeck, colorOfPlayedCard, 101);\n      }\n    } //Se não houver carta While, atuará como carta break\n    else if ((colorOfPlayedCard === currentColor || currentNumber == 101) && !isWhileCardOnPile) {\n        if (playerDeck.length === 2 && !isUnoButtonPressed) {\n          forgotUno(player, player, played_card, colorOfPlayedCard, 101);\n        } else {\n          const removeIndex = playerDeck.indexOf(played_card);\n          const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n          socketEmitUpdateGameState(player, player, played_card, updatedPlayerDeck, colorOfPlayedCard, 101);\n        }\n      } else {\n        alert(\"Moviment Invalid!\");\n      }\n  };\n\n  const pass = (player, turn, played_card) => {\n    const colorOfPlayedCard = played_card.charAt(played_card.length - 1);\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\n    console.log(colorOfPlayedCard === currentColor || 102 == currentNumber);\n\n    if (colorOfPlayedCard === currentColor && isWhileCardOnPile) {\n      if (playerDeck.length === 2 && !isUnoButtonPressed) {\n        forgotUno(player, player, played_card, colorOfPlayedCard, 102);\n      } else {\n        const removeIndex = playerDeck.indexOf(played_card);\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n        socketEmitUpdateGameState(player, player, played_card, updatedPlayerDeck, colorOfPlayedCard, 102);\n      }\n    } //Se não houver carta While, atuará como uma carta \"numérica\"\n    else if ((colorOfPlayedCard === currentColor || 102 == currentNumber) && !isWhileCardOnPile) {\n        if (playerDeck.length === 2 && !isUnoButtonPressed) {\n          forgotUno(player, nextTurn, played_card, colorOfPlayedCard, 102);\n        } else {\n          const removeIndex = playerDeck.indexOf(played_card);\n          const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n          socketEmitUpdateGameState(player, nextTurn, played_card, updatedPlayerDeck, colorOfPlayedCard, 102);\n        }\n      } else {\n        alert(\"Moviment Invalid!\");\n      }\n  };\n\n  const forgotUno = (player, turn, played_card, colorOfPlayedCard, numberOfPlayedCard, opponentsDeck = null, modifiedDeck = null, isWhileCardOnPile = false) => {\n    const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\n    const removeIndex = playerDeck.indexOf(played_card);\n    alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n    const copiedDrawCardPileArray = modifiedDeck != null ? modifiedDeck : drawCardPile; //pull out last two elements from it\n\n    const drawCard1 = copiedDrawCardPileArray.pop();\n    const drawCard2 = copiedDrawCardPileArray.pop();\n    const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)];\n    updatedPlayerDeck.push(drawCard1);\n    updatedPlayerDeck.push(drawCard2);\n    /**\r\n     * TODO: Parametrizar lógica do Som\r\n     * !isSoundMuted && playShufflingSound()*/\n\n    socketEmitUpdateGameState(player, turn, played_card, updatedPlayerDeck, colorOfPlayedCard, numberOfPlayedCard, copiedDrawCardPileArray, opponentsDeck, isWhileCardOnPile);\n  };\n  /**\r\n   * modifiedDrawCardPile -> Caso haja alteração no baralho antes de executar a função\r\n   * oponnentsDeck -> Caso o deck do oponente seja modificado, passar este parâmetro\r\n   */\n\n\n  const socketEmitUpdateGameState = (winner, turn, played_card, updatedPlayerDeck, colorOfPlayedCard, numberOfPlayedCard, modifiedDrawCardPile = null, opponentsDeck = null, isWhileCardOnPile = false) => {\n    let obj = \"\";\n    const currentColorOfPlayedCard = colorOfPlayedCard ? colorOfPlayedCard : currentColor;\n    const currentNumberOfPlayedCard = numberOfPlayedCard ? numberOfPlayedCard : currentNumber;\n    let ln = '';\n\n    try {\n      ln = typeof parseInt(currentNumber) == 'number' && currentNumber < 10 ? currentNumber : lastNumber;\n      console.log('Try currentnumber: ', {\n        currentNumber: currentNumber,\n        ln: ln\n      });\n    } catch (message) {\n      ln = currentNumber;\n      console.log('Catch currentnumber: ', {\n        currentNumber: currentNumber,\n        ln: ln\n      });\n    }\n\n    if (winner == 'Player 1') {\n      obj = opponentsDeck !== null ? {\n        gameOver: checkGameOver(player1Deck),\n        winner: checkWinner(player1Deck, winner),\n        turn: turn,\n        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n        player1Deck: [...updatedPlayerDeck],\n        player2Deck: [...opponentsDeck],\n        currentColor: currentColorOfPlayedCard,\n        currentNumber: currentNumberOfPlayedCard,\n        drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\n        lastNumber: ln,\n        isWhileCardOnPile: isWhileCardOnPile\n      } : {\n        gameOver: checkGameOver(player1Deck),\n        winner: checkWinner(player1Deck, winner),\n        turn: turn,\n        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n        player1Deck: [...updatedPlayerDeck],\n        currentColor: currentColorOfPlayedCard,\n        currentNumber: currentNumberOfPlayedCard,\n        drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\n        lastNumber: ln,\n        isWhileCardOnPile: isWhileCardOnPile\n      };\n    } else {\n      obj = opponentsDeck !== null ? {\n        gameOver: checkGameOver(player2Deck),\n        winner: checkWinner(player2Deck, winner),\n        turn: turn,\n        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n        player1Deck: [...opponentsDeck],\n        player2Deck: [...updatedPlayerDeck],\n        currentColor: currentColorOfPlayedCard,\n        currentNumber: currentNumberOfPlayedCard,\n        drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\n        lastNumber: ln,\n        isWhileCardOnPile: isWhileCardOnPile\n      } : {\n        gameOver: checkGameOver(player2Deck),\n        winner: checkWinner(player2Deck, winner),\n        turn: turn,\n        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n        player2Deck: [...updatedPlayerDeck],\n        currentColor: currentColorOfPlayedCard,\n        currentNumber: currentNumberOfPlayedCard,\n        drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\n        lastNumber: ln,\n        isWhileCardOnPile: isWhileCardOnPile\n      };\n    }\n\n    socket.emit('updateGameState', obj);\n  };\n\n  const checkGameOver = arr => {\n    return arr.length === 1;\n  };\n\n  const checkWinner = (arr, player) => {\n    return arr.length === 1 ? player : '';\n  };\n\n  const toggleChatBox = () => {\n    const chatBody = document.querySelector('.chat-body');\n\n    if (isChatBoxHidden) {\n      chatBody.style.display = 'block';\n      setChatBoxHidden(false);\n    } else {\n      chatBody.style.display = 'none';\n      setChatBoxHidden(true);\n    }\n  };\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', {\n        message: message\n      }, () => {\n        setMessage('');\n      });\n    }\n  };\n\n  const expectedTurnForSpinner = player == 'Player 1' ? 'Player 2' : 'Player 1';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"visaoPlayer: \", isWhileCardOnPile), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: player == 'Player 1' ? 'player2Deck' : 'player1Deck',\n      style: {\n        pointerEvents: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"playerDeckText\",\n        children: player == 'Player 1' ? 'Player 2' : 'Player 1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 17\n      }, this), player == 'Player 1' && player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"Card\",\n        onClick: () => onCardPlayedHandler(item),\n        src: require(`../assets/card-back.png`).default\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 21\n      }, this)), player == 'Player 2' && player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"Card\",\n        onClick: () => onCardPlayedHandler(item),\n        src: require(`../assets/card-back.png`).default\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 21\n      }, this)), turn === expectedTurnForSpinner && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middleInfo\",\n      style: turn === expectedTurnForSpinner ? {\n        pointerEvents: 'none'\n      } : null,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button\",\n        disabled: turn !== player,\n        onClick: onCardDrawnHandler,\n        children: \"DRAW CARD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 17\n      }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"Card\",\n        src: require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`).default\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 17\n      }, this), turn == 'Player 1' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button orange\",\n        disabled: player1Deck.length !== 2,\n        onClick: () => {\n          setUnoButtonPressed(!isUnoButtonPressed);\n          playUnoSound();\n        },\n        children: \"UNO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 21\n      }, this), turn == 'Player 2' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button orange\",\n        disabled: player2Deck.length !== 2,\n        onClick: () => {\n          setUnoButtonPressed(!isUnoButtonPressed);\n          playUnoSound();\n        },\n        children: \"UNO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: player == 'Player 1' ? 'player1Deck' : 'player2Deck',\n      style: turn === expectedTurnForSpinner ? {\n        pointerEvents: 'none'\n      } : null,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"playerDeckText\",\n        children: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 17\n      }, this), player == 'Player 1' && player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"Card\",\n        onClick: () => onCardPlayedHandler(item),\n        src: require(`../assets/cards-front/${item}.png`).default\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 21\n      }, this)), player == 'Player 2' && player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"Card\",\n        onClick: () => onCardPlayedHandler(item),\n        src: require(`../assets/cards-front/${item}.png`).default\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBoxWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: player == 'Player 1' ? \"chat-box chat-box-player1\" : \"chat-box chat-box-player2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-head\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Chat Box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 25\n          }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: toggleChatBox,\n            class: \"material-icons\",\n            children: \"keyboard_arrow_down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: toggleChatBox,\n            class: \"material-icons\",\n            children: \"keyboard_arrow_up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"msg-insert\",\n            children: messages.map(msg => {\n              if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"msg-receive\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 785,\n                columnNumber: 44\n              }, this);\n              if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"msg-send\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-text\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\",\n              value: message,\n              onChange: event => setMessage(event.target.value),\n              onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 708,\n    columnNumber: 7\n  }, this);\n};\n\n_s(VisaoPlayer, \"hXR62exp4htOSS7yBTRpRQi9+6E=\", false, function () {\n  return [useSound];\n});\n\n_c = VisaoPlayer;\nexport default VisaoPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"VisaoPlayer\");","map":{"version":3,"sources":["C:/Users/marja/projeto/client-devuno/src/pageComponents/visaoPlayer.js"],"names":["React","useEffect","useState","useSound","unoSound","Spinner","useWhileCard","VisaoPlayer","player","turn","currentColor","player1Deck","player2Deck","drawCardPile","isSoundMuted","playShufflingSound","playedCardsPile","currentNumber","playSkipCardSound","playDraw2CardSound","playWildCardSound","playDraw4CardSound","onCardDrawnHandler","socket","message","messages","setMessage","setMessages","lastNumber","isWhileCardOnPile","isUnoButtonPressed","setUnoButtonPressed","playUnoSound","isChatBoxHidden","setChatBoxHidden","onCardPlayedHandler","played_card","cardPlayedBy","console","log","numberOfPlayedCard","charAt","colorOfPlayedCard","whileCardLoop","length","forgotUno","removeIndex","indexOf","updatedPlayer1Deck","slice","socketEmitUpdateGameState","updatedPlayer2Deck","alert","forgotPressUno","drag2","wildCard","whileCard","breakCard","pass","drag4","opponent","isForgotUno","nextTurn","playerDeck","opponentDeck","modifiedDeck","opponentDrawCard1","pop","opponentDrawCard2","updatedPlayerDeck","newColor","prompt","toUpperCase","opponentDrawCard3","opponentDrawCard4","nextTurnIfSuccessfullPlay","opponentsDeck","copiedDrawCardPileArray","drawCard1","drawCard2","push","winner","modifiedDrawCardPile","obj","currentColorOfPlayedCard","currentNumberOfPlayedCard","ln","parseInt","gameOver","checkGameOver","checkWinner","emit","arr","toggleChatBox","chatBody","document","querySelector","style","display","sendMessage","event","preventDefault","expectedTurnForSpinner","pointerEvents","map","item","i","require","default","msg","user","text","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport useSound from 'use-sound'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\n\r\nimport Spinner from '../components/Spinner'\r\nimport useWhileCard from '../customHooks/useWhileCard'\r\n\r\n\r\nconst VisaoPlayer = ({\r\n    player,\r\n    turn,\r\n    currentColor,\r\n    player1Deck,\r\n    player2Deck,\r\n    drawCardPile,\r\n    isSoundMuted,\r\n    playShufflingSound,\r\n    playedCardsPile,\r\n    currentNumber,\r\n    playSkipCardSound,\r\n    playDraw2CardSound,\r\n    playWildCardSound,\r\n    playDraw4CardSound,onCardDrawnHandler,\r\n    socket,\r\n//transferir para o componente\r\n    message,messages,setMessage,setMessages,\r\n    lastNumber,\r\n    isWhileCardOnPile\r\n}) => {\r\n\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        console.log('Turno de quem jogou a carta: ', turn)\r\n        console.log('Jogou a carta \"isWhileCardOnPile\": ',isWhileCardOnPile)\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                console.log('Current Number: ',currentNumber)\r\n                console.log('Current Color: ',currentNumber)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,numberOfPlayedCard)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, numberOfPlayedCard)\r\n                    }\r\n                    \r\n                }else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 1','Player 2',played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n\r\n                            socketEmitUpdateGameState('Player 1', 'Player 2',\r\n                                played_card,updatedPlayer1Deck, \r\n                                colorOfPlayedCard,numberOfPlayedCard,)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"player2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\r\n                            socketEmitUpdateGameState('Player 2',\r\n                            'Player 1',\r\n                             played_card, updatedPlayer2Deck,colorOfPlayedCard,\r\n                              numberOfPlayedCard)\r\n                             \r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 2\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 2\",played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 2\",\"Player 1\",played_card,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 2\",\"Player 1\",played_card\r\n                                ,updatedPlayer2Deck,colorOfPlayedCard,numberOfPlayedCard)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,404)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card,404)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno(\"Player 1\",\"Player 1\",played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState(\"Player 1\",\"Player 1\",played_card,updatedPlayer1Deck,\r\n                                colorOfPlayedCard,404)\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n\r\n                            forgotUno('Player 1','Player 1',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player1Deck.indexOf(played_card)\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 1','Player 1',played_card,\r\n                                updatedPlayer1Deck,colorOfPlayedCard,404)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            forgotUno('Player 2','Player 2',played_card,colorOfPlayedCard,404)\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n\r\n                            const removeIndex = player2Deck.indexOf(played_card)\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            socketEmitUpdateGameState('Player 2','Player 2',played_card,\r\n                                updatedPlayer2Deck,colorOfPlayedCard, 404)\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card, 252 )\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card, 252)\r\n                    }\r\n                }\r\n                else if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n\r\n                        const forgotPressUno = player1Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 1\",played_card,colorOfPlayedCard,\"Player 2\", forgotPressUno)\r\n                    }\r\n                    else {\r\n\r\n                        const forgotPressUno = player2Deck.length===2 && !isUnoButtonPressed\r\n                        drag2(\"Player 2\",played_card,colorOfPlayedCard,\"Player 1\", forgotPressUno)\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card,300)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 300)\r\n                    }\r\n                    \r\n                }\r\n                else{\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        wildCard('Player 1','Player 2',played_card,\r\n                         player1Deck.length===2 && !isUnoButtonPressed)\r\n    \r\n                    }\r\n                    else {\r\n                        wildCard('Player 2','Player 1',played_card,\r\n                        player2Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }\r\n                \r\n                break;\r\n            }\r\n            case 'WHILE_R': case 'WHILE_G': case 'WHILE_B': case 'WHILE_Y': {\r\n                const colorOfPlayedCard = played_card.charAt(played_card.length-1)\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1',played_card, 100)\r\n                    }else{\r\n                        whileCardLoop('Player 2',played_card,100)\r\n                    }\r\n                    \r\n                }\r\n                else if(currentColor === colorOfPlayedCard){\r\n                    if(cardPlayedBy === 'Player 1'){\r\n                        whileCard('Player 1','Player 2',played_card,colorOfPlayedCard,\r\n                        player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }else{\r\n                        whileCard(\"Player 2\",'Player 1',played_card, colorOfPlayedCard,\r\n                            player1Deck.length===2 && !isUnoButtonPressed)\r\n                    }\r\n                }else{\r\n                    alert('Invalid Move!')\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'BREAK_R': case 'BREAK_G': case 'BREAK_B': case 'BREAK_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    breakCard('Player 1',turn,played_card)\r\n                }else{\r\n                    console.log('WhileCard: ', isWhileCardOnPile)\r\n                    breakCard('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            case 'PASS_R': case 'PASS_G': case 'PASS_B': case 'PASS_Y':{\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    pass('Player 1',turn,played_card)\r\n                }else{\r\n                    console.log('WhileCard: ', isWhileCardOnPile)\r\n                    pass('Player 2',turn,played_card)\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(currentNumber == 100){\r\n                    if(cardPlayedBy == 'Player 1'){\r\n                       whileCardLoop('Player 1', played_card,600)\r\n                    }else{\r\n                        whileCardLoop('Player 2', played_card, 600)\r\n                    }\r\n                    \r\n                }else if(cardPlayedBy === 'Player 1') {\r\n                    drag4('Player 1',played_card,'Player 2',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n                else {\r\n                    drag4('Player 2',played_card,'Player 1',player1Deck.length===2 && !isUnoButtonPressed)\r\n                }\r\n\r\n                \r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    const drag2 = (player,played_card,colorOfPlayedCard,opponent,isForgotUno=false) => {\r\n        const nextTurn = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        \r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,nextTurn,played_card,colorOfPlayedCard,252,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card);\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n            socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,\r\n                colorOfPlayedCard,252,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const drag4 = (player,played_card,opponent,isForgotUno=false) => {\r\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        let opponentDeck = opponent == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        const modifiedDeck = [...drawCardPile]\r\n        //VERIFICAR POSSIBILIDADE DE BUG SE HOUVER MENOS DE 4 CARTAS A SEREM TIRADAS\r\n        const opponentDrawCard1 = modifiedDeck.pop()\r\n        const opponentDrawCard2 = modifiedDeck.pop()\r\n        const opponentDrawCard3 = modifiedDeck.pop()\r\n        const opponentDrawCard4 = modifiedDeck.pop()      \r\n\r\n        opponentDeck = [...opponentDeck.slice(0, opponentDeck.length), opponentDrawCard1, opponentDrawCard2,opponentDrawCard3,opponentDrawCard4, ...opponentDeck.slice(opponentDeck.length)]\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player,player,played_card,newColor,600,\r\n                opponentDeck,modifiedDeck)\r\n        }else{\r\n            \r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = \r\n                [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n               \r\n\r\n            socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,\r\n                newColor,600,modifiedDeck,opponentDeck)\r\n        }\r\n    }\r\n\r\n    const wildCard = (player,turn,played_card,isForgotUno=false) => {\r\n       let newColor = prompt('Enter first letter of new color (R/G/B/Y)')\r\n       if(newColor){\r\n        newColor = newColor.toUpperCase()\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n            if(isForgotUno){\r\n                forgotUno(player,turn,played_card,newColor,300)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card);\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n                !isSoundMuted && playWildCardSound()\r\n                socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n                    newColor,300)\r\n            }\r\n        }else{\r\n            alert(\"Invalid Color!\")\r\n        }\r\n    }\r\n        \r\n    const whileCard = (player,turn,played_card,colorOfPlayedCard,isForgotUno=false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n\r\n        if(isForgotUno){\r\n            forgotUno(player, turn, played_card, colorOfPlayedCard, 100,null,null,true)\r\n        }else{\r\n            const removeIndex = playerDeck.indexOf(played_card)\r\n            const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        socketEmitUpdateGameState(player,turn,played_card,updatedPlayerDeck,\r\n            colorOfPlayedCard,100,null,null,true)\r\n        }\r\n    }\r\n\r\n    const whileCardLoop = (player, played_card, numberOfPlayedCard) => {\r\n    \r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck\r\n        const nextTurnIfSuccessfullPlay = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        //Verifica se o card jogado contém o mesmo número da última carta numérica presente\r\n        //na mesa\r\n        const removeIndex = playerDeck.indexOf(played_card)\r\n        const updatedPlayerDeck = \r\n        [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex+1)]\r\n\r\n        if(lastNumber === numberOfPlayedCard){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed) {\r\n                    forgotUno(player,nextTurnIfSuccessfullPlay,played_card,colorOfPlayedCard,numberOfPlayedCard, null,null,false)\r\n            }else{\r\n                socketEmitUpdateGameState(player,nextTurnIfSuccessfullPlay,played_card,updatedPlayerDeck,\r\n                    colorOfPlayedCard,numberOfPlayedCard,null,null,false)\r\n            }\r\n        }else{\r\n            alert(\"Number \" + lastNumber + \" required!\")\r\n\r\n            //socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck)\r\n            console.log('updatedPlayerDeck: ', updatedPlayerDeck)\r\n        }\r\n    }\r\n\r\n    const breakCard = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n        console.log((currentNumber))\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como carta break\r\n        else if( (colorOfPlayedCard === currentColor || currentNumber == 101 ) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                101)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,101)\r\n            }\r\n        }\r\n        else{\r\n            alert(\"Moviment Invalid!\")\r\n        }\r\n       \r\n    }\r\n\r\n    const pass = (player,turn,played_card) => {\r\n        const colorOfPlayedCard = played_card.charAt(played_card.length - 1)\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const nextTurn = turn == 'Player 1' ? 'Player 2' : 'Player 1';\r\n        console.log((colorOfPlayedCard === currentColor || 102 == currentNumber))\r\n\r\n        if(colorOfPlayedCard === currentColor && isWhileCardOnPile){\r\n\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,player, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,player,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        //Se não houver carta While, atuará como uma carta \"numérica\"\r\n        else if((colorOfPlayedCard === currentColor || 102 == currentNumber) && !isWhileCardOnPile){\r\n            if(playerDeck.length===2 && !isUnoButtonPressed){\r\n                forgotUno(player,nextTurn, played_card, colorOfPlayedCard,\r\n                102)\r\n            }else{\r\n                const removeIndex = playerDeck.indexOf(played_card)\r\n                const updatedPlayerDeck = [...playerDeck.slice(0,removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n    \r\n                socketEmitUpdateGameState(player,nextTurn,played_card,updatedPlayerDeck,colorOfPlayedCard,102)\r\n            }\r\n        }\r\n        else{\r\n            alert(\"Moviment Invalid!\")\r\n        }\r\n       \r\n    }\r\n\r\n    const forgotUno = (player,turn, played_card, colorOfPlayedCard,numberOfPlayedCard, opponentsDeck=null, modifiedDeck=null, isWhileCardOnPile = false) => {\r\n        const playerDeck = player == 'Player 1' ? player1Deck : player2Deck;\r\n        const removeIndex = playerDeck.indexOf(played_card);\r\n\r\n        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n        //make a copy of drawCardPile array\r\n        const copiedDrawCardPileArray = modifiedDeck != null ? modifiedDeck : drawCardPile\r\n        //pull out last two elements from it\r\n        const drawCard1 = copiedDrawCardPileArray.pop()\r\n        const drawCard2 = copiedDrawCardPileArray.pop()\r\n\r\n        const updatedPlayerDeck = [...playerDeck.slice(0, removeIndex), ...playerDeck.slice(removeIndex + 1)]\r\n        updatedPlayerDeck.push(drawCard1)\r\n        updatedPlayerDeck.push(drawCard2)\r\n        /**\r\n         * TODO: Parametrizar lógica do Som\r\n         * !isSoundMuted && playShufflingSound()*/\r\n\r\n        socketEmitUpdateGameState(player,\r\n            turn,played_card,updatedPlayerDeck, colorOfPlayedCard,numberOfPlayedCard,\r\n            copiedDrawCardPileArray, opponentsDeck, isWhileCardOnPile)\r\n    }\r\n        /**\r\n         * modifiedDrawCardPile -> Caso haja alteração no baralho antes de executar a função\r\n         * oponnentsDeck -> Caso o deck do oponente seja modificado, passar este parâmetro\r\n         */\r\n    const socketEmitUpdateGameState = (\r\n                                        winner,\r\n                                        turn,\r\n                                        played_card,\r\n                                        updatedPlayerDeck,\r\n                                        colorOfPlayedCard,\r\n                                        numberOfPlayedCard,\r\n                                        modifiedDrawCardPile = null,\r\n                                        opponentsDeck = null,\r\n                                        isWhileCardOnPile = false) => {\r\n\r\n        let obj = \"\";\r\n        const currentColorOfPlayedCard = colorOfPlayedCard ? colorOfPlayedCard : currentColor;\r\n        const currentNumberOfPlayedCard = numberOfPlayedCard ? numberOfPlayedCard : currentNumber;\r\n\r\n        let ln = ''\r\n        try{\r\n            ln =( typeof parseInt(currentNumber) == 'number') && (currentNumber < 10 )? currentNumber : lastNumber\r\n            console.log('Try currentnumber: ',{currentNumber:currentNumber, ln: ln})\r\n        }catch(message){\r\n            ln = currentNumber\r\n            console.log('Catch currentnumber: ',{currentNumber:currentNumber, ln: ln})\r\n        }\r\n\r\n        if(winner=='Player 1'){\r\n          obj =  opponentsDeck !== null ? \r\n            {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                player2Deck:[...opponentsDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player1Deck),\r\n                winner: checkWinner(player1Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }else{\r\n            obj =  opponentsDeck !== null ? {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player1Deck: [...opponentsDeck],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } : {\r\n                gameOver: checkGameOver(player2Deck),\r\n                winner: checkWinner(player2Deck, winner),\r\n                turn: turn,\r\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                player2Deck: [...updatedPlayerDeck],\r\n                currentColor: currentColorOfPlayedCard,\r\n                currentNumber: currentNumberOfPlayedCard,\r\n                drawCardPile: modifiedDrawCardPile != null ? [...modifiedDrawCardPile] : drawCardPile,\r\n                lastNumber: ln,\r\n                isWhileCardOnPile: isWhileCardOnPile\r\n            } \r\n        }\r\n\r\n        socket.emit('updateGameState', obj)\r\n    }\r\n\r\n\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n\r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    const expectedTurnForSpinner = player == 'Player 1' ? 'Player 2' : 'Player 1'\r\n    \r\n  return (\r\n      \r\n      <div>\r\n          {console.log(\"visaoPlayer: \",isWhileCardOnPile)}\r\n            <div className={ player == 'Player 1'? 'player2Deck' :'player1Deck'} style={{pointerEvents: 'none'}}>\r\n                <p className='playerDeckText'>{player == 'Player 1' ? 'Player 2' : 'Player 1'}</p>\r\n                { player == 'Player 1' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/card-back.png`).default}\r\n                        />\r\n                ))}\r\n                {turn===expectedTurnForSpinner && <Spinner />}\r\n            </div>\r\n            <br />\r\n            <div className='middleInfo' style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <button className='game-button' disabled={turn !== player} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                {playedCardsPile && playedCardsPile.length>0 &&\r\n                <img\r\n                    className='Card'\r\n                    src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                    /> }\r\n                {turn == 'Player 1' &&\r\n                    <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n\r\n                {turn == 'Player 2' &&\r\n                    <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                        playUnoSound()\r\n                    }}>UNO</button>\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className={player=='Player 1' ? 'player1Deck' : 'player2Deck'} style={turn === expectedTurnForSpinner ? {pointerEvents: 'none'} : null}>\r\n                <p className='playerDeckText'>{ player }</p>\r\n                { player == 'Player 1' && player1Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n                { player == 'Player 2' && player2Deck.map((item, i) => (\r\n                    <img\r\n                        key={i}\r\n                        className='Card'\r\n                        onClick={() => onCardPlayedHandler(item)}\r\n                        src={require(`../assets/cards-front/${item}.png`).default}\r\n                        />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chatBoxWrapper\">\r\n                <div className={player == 'Player 1' ? \"chat-box chat-box-player1\" : \"chat-box chat-box-player2\"}>\r\n                    <div className=\"chat-head\">\r\n                        <h2>Chat Box</h2>\r\n                        {!isChatBoxHidden ?\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                        <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                    </div>\r\n                    <div className=\"chat-body\">\r\n                        <div className=\"msg-insert\">\r\n                            {messages.map(msg => {\r\n                                if(msg.user === 'Player 2')\r\n                                    return <div className=\"msg-receive\">{msg.text}</div>\r\n                                if(msg.user === 'Player 1')\r\n                                    return <div className=\"msg-send\">{msg.text}</div>\r\n                            })}\r\n                        </div>\r\n                        <div className=\"chat-text\">\r\n                            <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n      </div>\r\n  )}\r\n\r\nexport default VisaoPlayer"]},"metadata":{},"sourceType":"module"}